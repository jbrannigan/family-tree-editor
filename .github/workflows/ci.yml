name: CI

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  changed-files:
    name: Detect changed paths
    runs-on: ubuntu-latest
    outputs:
      docs_only: ${{ steps.filter.outputs.docs_only }}
    steps:
      - uses: actions/checkout@v5
      - id: filter
        uses: dorny/paths-filter@v3
        with:
          # "docs_only" means: NO changes under src/, only docs/config/etc.
          filters: |
            docs_only:
              - '!src/**'
              - '.github/**'
              - 'README.md'
              - 'CONTRIBUTING.md'
              - 'SECURITY.md'
              - 'LICENSE'
              - '*.md'

  lint-format:
    name: Lint & format check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
      - name: Install deps
        run: npm ci || npm i
      - name: Prettier (no changes)
        run: npm run format:check
      - name: ESLint
        run: npm run lint

  unit:
    name: Unit (Vitest) — Node ${{ matrix.node }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        node: [18, 20, 22]
    steps:
      - uses: actions/checkout@v5

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: npm

      - name: Install deps
        run: npm ci || npm i

      - name: Run unit tests (Vitest)
        run: npm run test:unit
            # --- Generate coverage only on Node 20 to keep CI fast
      - name: Unit coverage (Vitest)                # Step label in the UI
        if: matrix.node == 20                       # Run this step only for the matrix leg where node=20
        run: npm run test:unit -- --coverage        # Re-run vitest with coverage enabled (outputs ./coverage/*)

      # --- Upload the full HTML report as a downloadable artifact
      - name: Upload coverage artifact              # Step label in the UI
        if: matrix.node == 20                       # Only upload once (Node 20 leg)
        uses: actions/upload-artifact@v4            # GitHub’s official artifact uploader
        with:
          name: unit-coverage-html                  # Artifact name as it will appear on the run page
          path: coverage                            # Upload the entire 'coverage' directory vitest produced
          if-no-files-found: error                  # Fail the step if coverage didn’t generate for some reason
          retention-days: 7                         # Keep the artifact for 7 days (tune as you like)

      # --- Post a small Markdown table into the job's Summary tab
      - name: Post coverage summary                 # Step label in the UI
        if: matrix.node == 20                       # Only once (Node 20 leg)
        run: |                                      # Multi-line shell script
          node -e "const s=require('./coverage/coverage-summary.json').total; \
            const row=(k)=>'| '+k+' | '+s[k].pct+'% |'; \
            console.log(['# Unit coverage', '', '| Metric | % |','|---|---|',row('lines'),row('statements'),row('functions'),row('branches')].join('\n'))" \
            >> $GITHUB_STEP_SUMMARY                  # Append Markdown to the special summary file GitHub renders

  unit-summary:
=======
        
    unit-summary:
>>>>>>> a364af24 (ci: Unit tests on Node 18/20/22 + summary check)
=======

  unit-summary:
>>>>>>> 2ea417b7 (ci: add Unit (summary) aggregator)
    name: Unit (summary)
    runs-on: ubuntu-latest
    needs: [unit]
    if: ${{ always() }}
    steps:
      - name: Fail if any Unit matrix job failed/cancelled
        if: ${{ contains(needs.*.result, 'failure') || contains(needs.*.result, 'cancelled') }}
        run: |
          echo "At least one Unit job failed or was cancelled."
          exit 1
      - name: All Unit jobs passed
        if: ${{ !contains(needs.*.result, 'failure') && !contains(needs.*.result, 'cancelled') }}
        run: echo "All green ✅"

  e2e:
    name: E2E (Playwright)
    needs: [lint-format, changed-files]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        shard: [1, 2, 3]
    if: ${{ github.event_name != 'pull_request' || needs.changed-files.outputs.docs_only != 'true' }}    
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
      - name: Install deps
        run: npm ci || npm i
      - name: Cache Playwright browsers
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-pw-${{ hashFiles('package-lock.json') }}
      - name: Install Playwright
        run: npx playwright install --with-deps
      - name: Run Playwright (shard ${{ matrix.shard }})
        env:
          PLAYWRIGHT_HTML_REPORT: playwright-report
        run: npx playwright test --shard=${{ matrix.shard }}/3 --reporter=line
      - name: Upload shard report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report-shard-${{ matrix.shard }}
          path: playwright-report
          if-no-files-found: ignore
          retention-days: 7

  e2e-summary:
    name: E2E (summary)
    runs-on: ubuntu-latest
    needs: [changed-files, e2e]   # keep both
    if: ${{ always() }}           # always run so the required check is present
    steps:
      # Fast-path for docs-only PRs: mark E2E as skipped (success)
      - name: Docs-only PR → mark E2E as skipped (pass)
        if: ${{ github.event_name == 'pull_request' && needs.changed-files.outputs.docs_only == 'true' }}
        run: echo "Docs-only changes → skipping E2E shards."

      # On code PRs: fail if the matrix job failed or was cancelled
      - name: Fail if E2E failed/cancelled
        if: ${{ needs.changed-files.outputs.docs_only != 'true' && (needs.e2e.result == 'failure' || needs.e2e.result == 'cancelled') }}
        run: |
          echo "E2E job result: ${{ needs.e2e.result }}"
          exit 1

      # Otherwise, all good
      - name: All E2E shards passed
        if: ${{ needs.changed-files.outputs.docs_only != 'true' && needs.e2e.result == 'success' }}
        run: echo "All green ✅"

      # Optional: keep the old one-line summary note
      - name: Summarize shards
        if: ${{ needs.changed-files.outputs.docs_only != 'true' }}
        run: |
          echo "Overall E2E result: **${{ needs.e2e.result }}**" >> $GITHUB_STEP_SUMMARY
