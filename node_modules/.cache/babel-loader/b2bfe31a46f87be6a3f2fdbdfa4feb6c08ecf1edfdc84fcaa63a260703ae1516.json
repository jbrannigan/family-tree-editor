{"ast":null,"code":"var _jsxFileName = \"/home/jbrannigan/src/familytree/src/GraphView.js\",\n  _s = $RefreshSig$();\n// GraphView.js\nimport React, { useMemo } from \"react\";\n\n/**\r\n * Simple text wrapper that wraps on spaces, fallback to hard-break\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction wrapText(label, maxCharsPerLine = 22) {\n  if (!label) return [\"\"];\n  const words = String(label).split(/\\s+/);\n  const lines = [];\n  let line = \"\";\n  for (const w of words) {\n    if (line.length === 0) {\n      // start a new line\n      if (w.length <= maxCharsPerLine) {\n        line = w;\n      } else {\n        // word longer than max: hard-break it\n        for (let i = 0; i < w.length; i += maxCharsPerLine) {\n          lines.push(w.slice(i, i + maxCharsPerLine));\n        }\n        line = \"\";\n      }\n    } else {\n      if ((line + \" \" + w).length <= maxCharsPerLine) {\n        line = line + \" \" + w;\n      } else {\n        lines.push(line);\n        if (w.length <= maxCharsPerLine) {\n          line = w;\n        } else {\n          for (let i = 0; i < w.length; i += maxCharsPerLine) {\n            const chunk = w.slice(i, i + maxCharsPerLine);\n            if (chunk.length === maxCharsPerLine) {\n              lines.push(chunk);\n            } else {\n              line = chunk; // last chunk becomes current line\n            }\n          }\n        }\n      }\n    }\n  }\n  if (line) lines.push(line);\n  return lines;\n}\n\n/**\r\n * Measure a node's box size from its text lines\r\n * We go monospaced-ish: ~7.2 px per char, 16px line height\r\n */\nfunction measureNodeBox(node, config) {\n  const {\n    paddingX,\n    paddingY,\n    charPx,\n    lineHeight\n  } = config;\n  const lines = wrapText(node.name, config.maxCharsPerLine);\n  const maxLen = Math.max(...lines.map(l => l.length), 1);\n  const textW = maxLen * charPx;\n  const textH = lines.length * lineHeight;\n  const width = Math.max(config.minBoxWidth, textW + paddingX * 2);\n  const height = Math.max(config.minBoxHeight, textH + paddingY * 2);\n  return {\n    lines,\n    width,\n    height\n  };\n}\n\n/**\r\n * Compute subtree width (for sibling spacing) and decorate nodes with layout info\r\n */\nfunction computeSizes(node, config) {\n  const self = measureNodeBox(node, config);\n  let children = Array.isArray(node.children) ? node.children : [];\n  if (children.length === 0) {\n    node._layout = {\n      ...self,\n      subtreeWidth: self.width,\n      subtreeHeight: self.height\n    };\n    return node._layout;\n  }\n\n  // compute children sizes first\n  const childLayouts = children.map(c => computeSizes(c, config));\n  const totalChildrenWidth = childLayouts.reduce((acc, c) => acc + c.subtreeWidth, 0) + config.siblingGap * (childLayouts.length - 1);\n  const subtreeWidth = Math.max(self.width, totalChildrenWidth);\n  const subtreeHeight = self.height + config.levelGap + Math.max(...childLayouts.map(c => c.subtreeHeight), 0);\n  node._layout = {\n    ...self,\n    subtreeWidth,\n    subtreeHeight\n  };\n  return node._layout;\n}\n\n/**\r\n * Assign x,y positions, centering parent over children\r\n */\nfunction assignPositions(node, leftX, topY, config) {\n  const L = node._layout;\n  const children = Array.isArray(node.children) ? node.children : [];\n\n  // If has children, center parent over the children block.\n  if (children.length > 0) {\n    const totalChildrenWidth = children.reduce((acc, c) => acc + c._layout.subtreeWidth, 0) + config.siblingGap * (children.length - 1);\n    const childrenLeft = leftX + (L.subtreeWidth - totalChildrenWidth) / 2;\n\n    // parent x is centered over children span\n    node._layout.x = leftX + (L.subtreeWidth - L.width) / 2;\n    node._layout.y = topY;\n\n    // position children in a row\n    let cx = childrenLeft;\n    const cy = topY + L.height + config.levelGap;\n    for (const child of children) {\n      assignPositions(child, cx, cy, config);\n      cx += child._layout.subtreeWidth + config.siblingGap;\n    }\n  } else {\n    // leaf: center the box in its subtree width\n    node._layout.x = leftX + (L.subtreeWidth - L.width) / 2;\n    node._layout.y = topY;\n  }\n}\n\n/**\r\n * Render a node (box + text) and links to children\r\n */\nfunction renderNode(node, config, out) {\n  const L = node._layout;\n  const {\n    x,\n    y,\n    width,\n    height,\n    lines\n  } = L;\n\n  // Box\n  out.nodes.push(/*#__PURE__*/_jsxDEV(\"rect\", {\n    x: x,\n    y: y,\n    width: width,\n    height: height,\n    rx: 8,\n    ry: 8,\n    fill: \"#fff\",\n    stroke: \"#444\",\n    strokeWidth: \"1.25\"\n  }, `box-${node.id || node.name}-${x}-${y}`, false, {\n    fileName: _jsxFileName,\n    lineNumber: 140,\n    columnNumber: 5\n  }, this));\n\n  // Text (tspan lines)\n  const textX = x + width / 2;\n  const textY = y + config.paddingY + config.lineHeight; // first baseline\n  out.nodes.push(/*#__PURE__*/_jsxDEV(\"text\", {\n    x: textX,\n    y: textY,\n    textAnchor: \"middle\",\n    fontSize: \"12\",\n    fill: \"#111\",\n    style: {\n      fontFamily: \"system-ui, -apple-system, Segoe UI, Roboto, sans-serif\"\n    },\n    children: lines.map((ln, i) => /*#__PURE__*/_jsxDEV(\"tspan\", {\n      x: textX,\n      dy: i === 0 ? 0 : config.lineHeight,\n      children: ln\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 9\n    }, this))\n  }, `text-${node.id || node.name}-${x}-${y}`, false, {\n    fileName: _jsxFileName,\n    lineNumber: 158,\n    columnNumber: 5\n  }, this));\n\n  // Links\n  const children = Array.isArray(node.children) ? node.children : [];\n  for (const child of children) {\n    const startX = x + width / 2;\n    const startY = y + height;\n    const endX = child._layout.x + child._layout.width / 2;\n    const endY = child._layout.y;\n    const midY = (startY + endY) / 2;\n    out.links.push(/*#__PURE__*/_jsxDEV(\"path\", {\n      d: `M${startX},${startY} V${midY} H${endX} V${endY}`,\n      stroke: \"#888\",\n      fill: \"none\",\n      strokeWidth: \"1\"\n    }, `link-${node.id || node.name}->${child.id || child.name}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 7\n    }, this));\n\n    // recurse\n    renderNode(child, config, out);\n  }\n}\nfunction normalizeForest(tree) {\n  if (!tree) return [];\n  return Array.isArray(tree) ? tree : [tree];\n}\nexport default function GraphView({\n  tree\n}) {\n  _s();\n  const config = useMemo(() => ({\n    // layout\n    levelGap: 60,\n    siblingGap: 24,\n    // text / boxes\n    maxCharsPerLine: 24,\n    charPx: 7.2,\n    lineHeight: 16,\n    paddingX: 10,\n    paddingY: 8,\n    minBoxWidth: 120,\n    minBoxHeight: 36,\n    // outer margin\n    margin: 24\n  }), []);\n  const {\n    nodes,\n    links,\n    totalWidth,\n    totalHeight\n  } = useMemo(() => {\n    const forest = normalizeForest(tree);\n    if (forest.length === 0) {\n      return {\n        nodes: [],\n        links: [],\n        totalWidth: 800,\n        totalHeight: 200\n      };\n    }\n\n    // 1) compute sizes for each root\n    for (const root of forest) {\n      computeSizes(root, config);\n    }\n\n    // 2) place roots left-to-right with forest gaps\n    let cursorX = config.margin;\n    let maxBottom = 0;\n    for (const root of forest) {\n      assignPositions(root, cursorX, config.margin, config);\n      cursorX += root._layout.subtreeWidth + 40; // gap between separate trees\n      maxBottom = Math.max(maxBottom, root._layout.y + root._layout.subtreeHeight);\n    }\n\n    // 3) render\n    const out = {\n      nodes: [],\n      links: []\n    };\n    for (const root of forest) {\n      renderNode(root, config, out);\n    }\n    const totalWidth = cursorX + config.margin - 40; // remove last added gap\n    const totalHeight = maxBottom + config.margin;\n    return {\n      ...out,\n      totalWidth,\n      totalHeight\n    };\n  }, [tree, config]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"graph-view\",\n    style: {\n      marginTop: 12\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      style: {\n        marginTop: 0\n      },\n      children: \"SVG Tree Diagram\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n      children: \"If the tree looks too small, use the \\\"Download SVG\\\" button to save the Tree Diagram to a separate file.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n      children: \" You may focus the Tree View to a smaller part of the tree.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n      children: \"You can view and possibly print the downloaded file with a browser.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n      children: \" Printing large SVG files is a separate subject... \\uD83D\\uDE0A\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n      id: \"graph-svg\",\n      width: \"100%\",\n      height: Math.min(totalHeight, 1200),\n      viewBox: `0 0 ${Math.max(totalWidth, 800)} ${totalHeight}`,\n      style: {\n        border: \"1px solid #ddd\",\n        background: \"#fafafa\"\n      },\n      preserveAspectRatio: \"xMinYMin meet\",\n      children: [links, nodes]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 257,\n    columnNumber: 5\n  }, this);\n}\n_s(GraphView, \"oteqmbKW6RH06okICXwh4IDlPBE=\");\n_c = GraphView;\nvar _c;\n$RefreshReg$(_c, \"GraphView\");","map":{"version":3,"names":["React","useMemo","jsxDEV","_jsxDEV","wrapText","label","maxCharsPerLine","words","String","split","lines","line","w","length","i","push","slice","chunk","measureNodeBox","node","config","paddingX","paddingY","charPx","lineHeight","name","maxLen","Math","max","map","l","textW","textH","width","minBoxWidth","height","minBoxHeight","computeSizes","self","children","Array","isArray","_layout","subtreeWidth","subtreeHeight","childLayouts","c","totalChildrenWidth","reduce","acc","siblingGap","levelGap","assignPositions","leftX","topY","L","childrenLeft","x","y","cx","cy","child","renderNode","out","nodes","rx","ry","fill","stroke","strokeWidth","id","fileName","_jsxFileName","lineNumber","columnNumber","textX","textY","textAnchor","fontSize","style","fontFamily","ln","dy","startX","startY","endX","endY","midY","links","d","normalizeForest","tree","GraphView","_s","margin","totalWidth","totalHeight","forest","root","cursorX","maxBottom","className","marginTop","min","viewBox","border","background","preserveAspectRatio","_c","$RefreshReg$"],"sources":["/home/jbrannigan/src/familytree/src/GraphView.js"],"sourcesContent":["// GraphView.js\r\nimport React, { useMemo } from \"react\";\r\n\r\n/**\r\n * Simple text wrapper that wraps on spaces, fallback to hard-break\r\n */\r\nfunction wrapText(label, maxCharsPerLine = 22) {\r\n  if (!label) return [\"\"];\r\n  const words = String(label).split(/\\s+/);\r\n  const lines = [];\r\n  let line = \"\";\r\n\r\n  for (const w of words) {\r\n    if (line.length === 0) {\r\n      // start a new line\r\n      if (w.length <= maxCharsPerLine) {\r\n        line = w;\r\n      } else {\r\n        // word longer than max: hard-break it\r\n        for (let i = 0; i < w.length; i += maxCharsPerLine) {\r\n          lines.push(w.slice(i, i + maxCharsPerLine));\r\n        }\r\n        line = \"\";\r\n      }\r\n    } else {\r\n      if ((line + \" \" + w).length <= maxCharsPerLine) {\r\n        line = line + \" \" + w;\r\n      } else {\r\n        lines.push(line);\r\n        if (w.length <= maxCharsPerLine) {\r\n          line = w;\r\n        } else {\r\n          for (let i = 0; i < w.length; i += maxCharsPerLine) {\r\n            const chunk = w.slice(i, i + maxCharsPerLine);\r\n            if (chunk.length === maxCharsPerLine) {\r\n              lines.push(chunk);\r\n            } else {\r\n              line = chunk; // last chunk becomes current line\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  if (line) lines.push(line);\r\n  return lines;\r\n}\r\n\r\n/**\r\n * Measure a node's box size from its text lines\r\n * We go monospaced-ish: ~7.2 px per char, 16px line height\r\n */\r\nfunction measureNodeBox(node, config) {\r\n  const { paddingX, paddingY, charPx, lineHeight } = config;\r\n  const lines = wrapText(node.name, config.maxCharsPerLine);\r\n  const maxLen = Math.max(...lines.map((l) => l.length), 1);\r\n  const textW = maxLen * charPx;\r\n  const textH = lines.length * lineHeight;\r\n  const width = Math.max(config.minBoxWidth, textW + paddingX * 2);\r\n  const height = Math.max(config.minBoxHeight, textH + paddingY * 2);\r\n  return { lines, width, height };\r\n}\r\n\r\n/**\r\n * Compute subtree width (for sibling spacing) and decorate nodes with layout info\r\n */\r\nfunction computeSizes(node, config) {\r\n  const self = measureNodeBox(node, config);\r\n  let children = Array.isArray(node.children) ? node.children : [];\r\n\r\n  if (children.length === 0) {\r\n    node._layout = {\r\n      ...self,\r\n      subtreeWidth: self.width,\r\n      subtreeHeight: self.height,\r\n    };\r\n    return node._layout;\r\n  }\r\n\r\n  // compute children sizes first\r\n  const childLayouts = children.map((c) => computeSizes(c, config));\r\n  const totalChildrenWidth =\r\n    childLayouts.reduce((acc, c) => acc + c.subtreeWidth, 0) +\r\n    config.siblingGap * (childLayouts.length - 1);\r\n  const subtreeWidth = Math.max(self.width, totalChildrenWidth);\r\n  const subtreeHeight =\r\n    self.height +\r\n    config.levelGap +\r\n    Math.max(...childLayouts.map((c) => c.subtreeHeight), 0);\r\n\r\n  node._layout = {\r\n    ...self,\r\n    subtreeWidth,\r\n    subtreeHeight,\r\n  };\r\n  return node._layout;\r\n}\r\n\r\n/**\r\n * Assign x,y positions, centering parent over children\r\n */\r\nfunction assignPositions(node, leftX, topY, config) {\r\n  const L = node._layout;\r\n  const children = Array.isArray(node.children) ? node.children : [];\r\n\r\n  // If has children, center parent over the children block.\r\n  if (children.length > 0) {\r\n    const totalChildrenWidth =\r\n      children.reduce((acc, c) => acc + c._layout.subtreeWidth, 0) +\r\n      config.siblingGap * (children.length - 1);\r\n    const childrenLeft = leftX + (L.subtreeWidth - totalChildrenWidth) / 2;\r\n\r\n    // parent x is centered over children span\r\n    node._layout.x = leftX + (L.subtreeWidth - L.width) / 2;\r\n    node._layout.y = topY;\r\n\r\n    // position children in a row\r\n    let cx = childrenLeft;\r\n    const cy = topY + L.height + config.levelGap;\r\n    for (const child of children) {\r\n      assignPositions(child, cx, cy, config);\r\n      cx += child._layout.subtreeWidth + config.siblingGap;\r\n    }\r\n  } else {\r\n    // leaf: center the box in its subtree width\r\n    node._layout.x = leftX + (L.subtreeWidth - L.width) / 2;\r\n    node._layout.y = topY;\r\n  }\r\n}\r\n\r\n/**\r\n * Render a node (box + text) and links to children\r\n */\r\nfunction renderNode(node, config, out) {\r\n  const L = node._layout;\r\n  const { x, y, width, height, lines } = L;\r\n\r\n  // Box\r\n  out.nodes.push(\r\n    <rect\r\n      key={`box-${node.id || node.name}-${x}-${y}`}\r\n      x={x}\r\n      y={y}\r\n      width={width}\r\n      height={height}\r\n      rx={8}\r\n      ry={8}\r\n      fill=\"#fff\"\r\n      stroke=\"#444\"\r\n      strokeWidth=\"1.25\"\r\n    />\r\n  );\r\n\r\n  // Text (tspan lines)\r\n  const textX = x + width / 2;\r\n  const textY = y + config.paddingY + config.lineHeight; // first baseline\r\n  out.nodes.push(\r\n    <text\r\n      key={`text-${node.id || node.name}-${x}-${y}`}\r\n      x={textX}\r\n      y={textY}\r\n      textAnchor=\"middle\"\r\n      fontSize=\"12\"\r\n      fill=\"#111\"\r\n      style={{ fontFamily: \"system-ui, -apple-system, Segoe UI, Roboto, sans-serif\" }}\r\n    >\r\n      {lines.map((ln, i) => (\r\n        <tspan key={i} x={textX} dy={i === 0 ? 0 : config.lineHeight}>\r\n          {ln}\r\n        </tspan>\r\n      ))}\r\n    </text>\r\n  );\r\n\r\n  // Links\r\n  const children = Array.isArray(node.children) ? node.children : [];\r\n  for (const child of children) {\r\n    const startX = x + width / 2;\r\n    const startY = y + height;\r\n    const endX = child._layout.x + child._layout.width / 2;\r\n    const endY = child._layout.y;\r\n    const midY = (startY + endY) / 2;\r\n\r\n    out.links.push(\r\n      <path\r\n        key={`link-${(node.id || node.name)}->${(child.id || child.name)}`}\r\n        d={`M${startX},${startY} V${midY} H${endX} V${endY}`}\r\n        stroke=\"#888\"\r\n        fill=\"none\"\r\n        strokeWidth=\"1\"\r\n      />\r\n    );\r\n\r\n    // recurse\r\n    renderNode(child, config, out);\r\n  }\r\n}\r\n\r\nfunction normalizeForest(tree) {\r\n  if (!tree) return [];\r\n  return Array.isArray(tree) ? tree : [tree];\r\n}\r\n\r\nexport default function GraphView({ tree }) {\r\n  const config = useMemo(\r\n    () => ({\r\n      // layout\r\n      levelGap: 60,\r\n      siblingGap: 24,\r\n      // text / boxes\r\n      maxCharsPerLine: 24,\r\n      charPx: 7.2,\r\n      lineHeight: 16,\r\n      paddingX: 10,\r\n      paddingY: 8,\r\n      minBoxWidth: 120,\r\n      minBoxHeight: 36,\r\n      // outer margin\r\n      margin: 24,\r\n    }),\r\n    []\r\n  );\r\n\r\n  const { nodes, links, totalWidth, totalHeight } = useMemo(() => {\r\n    const forest = normalizeForest(tree);\r\n    if (forest.length === 0) {\r\n      return { nodes: [], links: [], totalWidth: 800, totalHeight: 200 };\r\n    }\r\n\r\n    // 1) compute sizes for each root\r\n    for (const root of forest) {\r\n      computeSizes(root, config);\r\n    }\r\n\r\n    // 2) place roots left-to-right with forest gaps\r\n    let cursorX = config.margin;\r\n    let maxBottom = 0;\r\n    for (const root of forest) {\r\n      assignPositions(root, cursorX, config.margin, config);\r\n      cursorX += root._layout.subtreeWidth + 40; // gap between separate trees\r\n      maxBottom = Math.max(maxBottom, root._layout.y + root._layout.subtreeHeight);\r\n    }\r\n\r\n    // 3) render\r\n    const out = { nodes: [], links: [] };\r\n    for (const root of forest) {\r\n      renderNode(root, config, out);\r\n    }\r\n\r\n    const totalWidth = cursorX + config.margin - 40; // remove last added gap\r\n    const totalHeight = maxBottom + config.margin;\r\n\r\n    return { ...out, totalWidth, totalHeight };\r\n  }, [tree, config]);\r\n\r\n  return (\r\n    <div className=\"graph-view\" style={{ marginTop: 12 }}>\r\n      <h3 style={{ marginTop: 0 }}>SVG Tree Diagram</h3>\r\n      <li>If the tree looks too small, use the \"Download SVG\" button to save \r\n        the Tree Diagram to a separate file.</li>\r\n      <li> You may focus the Tree View to a smaller part of the tree.</li>\r\n      <li>You can view and possibly print the downloaded \r\n        file with a browser.</li>\r\n      <li> Printing large SVG files is a \r\n          separate subject... 😊</li>\r\n      <br></br>\r\n      <svg\r\n        id=\"graph-svg\"\r\n        width=\"100%\"\r\n        height={Math.min(totalHeight, 1200)}\r\n        viewBox={`0 0 ${Math.max(totalWidth, 800)} ${totalHeight}`}\r\n        style={{ border: \"1px solid #ddd\", background: \"#fafafa\" }}\r\n        preserveAspectRatio=\"xMinYMin meet\"\r\n      >\r\n        {links}\r\n        {nodes}\r\n      </svg>\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}