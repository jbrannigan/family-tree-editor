{"ast":null,"code":"// GraphView.js\nimport React,{useMemo}from\"react\";/**\r\n * Simple text wrapper that wraps on spaces, fallback to hard-break\r\n */import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function wrapText(label){let maxCharsPerLine=arguments.length>1&&arguments[1]!==undefined?arguments[1]:22;if(!label)return[\"\"];const words=String(label).split(/\\s+/);const lines=[];let line=\"\";for(const w of words){if(line.length===0){// start a new line\nif(w.length<=maxCharsPerLine){line=w;}else{// word longer than max: hard-break it\nfor(let i=0;i<w.length;i+=maxCharsPerLine){lines.push(w.slice(i,i+maxCharsPerLine));}line=\"\";}}else{if((line+\" \"+w).length<=maxCharsPerLine){line=line+\" \"+w;}else{lines.push(line);if(w.length<=maxCharsPerLine){line=w;}else{for(let i=0;i<w.length;i+=maxCharsPerLine){const chunk=w.slice(i,i+maxCharsPerLine);if(chunk.length===maxCharsPerLine){lines.push(chunk);}else{line=chunk;// last chunk becomes current line\n}}}}}}if(line)lines.push(line);return lines;}/**\r\n * Measure a node's box size from its text lines\r\n * We go monospaced-ish: ~7.2 px per char, 16px line height\r\n */function measureNodeBox(node,config){const{paddingX,paddingY,charPx,lineHeight}=config;const lines=wrapText(node.name,config.maxCharsPerLine);const maxLen=Math.max(...lines.map(l=>l.length),1);const textW=maxLen*charPx;const textH=lines.length*lineHeight;const width=Math.max(config.minBoxWidth,textW+paddingX*2);const height=Math.max(config.minBoxHeight,textH+paddingY*2);return{lines,width,height};}/**\r\n * Compute subtree width (for sibling spacing) and decorate nodes with layout info\r\n */function computeSizes(node,config){const self=measureNodeBox(node,config);let children=Array.isArray(node.children)?node.children:[];if(children.length===0){node._layout={...self,subtreeWidth:self.width,subtreeHeight:self.height};return node._layout;}// compute children sizes first\nconst childLayouts=children.map(c=>computeSizes(c,config));const totalChildrenWidth=childLayouts.reduce((acc,c)=>acc+c.subtreeWidth,0)+config.siblingGap*(childLayouts.length-1);const subtreeWidth=Math.max(self.width,totalChildrenWidth);const subtreeHeight=self.height+config.levelGap+Math.max(...childLayouts.map(c=>c.subtreeHeight),0);node._layout={...self,subtreeWidth,subtreeHeight};return node._layout;}/**\r\n * Assign x,y positions, centering parent over children\r\n */function assignPositions(node,leftX,topY,config){const L=node._layout;const children=Array.isArray(node.children)?node.children:[];// If has children, center parent over the children block.\nif(children.length>0){const totalChildrenWidth=children.reduce((acc,c)=>acc+c._layout.subtreeWidth,0)+config.siblingGap*(children.length-1);const childrenLeft=leftX+(L.subtreeWidth-totalChildrenWidth)/2;// parent x is centered over children span\nnode._layout.x=leftX+(L.subtreeWidth-L.width)/2;node._layout.y=topY;// position children in a row\nlet cx=childrenLeft;const cy=topY+L.height+config.levelGap;for(const child of children){assignPositions(child,cx,cy,config);cx+=child._layout.subtreeWidth+config.siblingGap;}}else{// leaf: center the box in its subtree width\nnode._layout.x=leftX+(L.subtreeWidth-L.width)/2;node._layout.y=topY;}}/**\r\n * Render a node (box + text) and links to children\r\n */function renderNode(node,config,out){const L=node._layout;const{x,y,width,height,lines}=L;// Box\nout.nodes.push(/*#__PURE__*/_jsx(\"rect\",{x:x,y:y,width:width,height:height,rx:8,ry:8,fill:\"#fff\",stroke:\"#444\",strokeWidth:\"1.25\"},`box-${node.id||node.name}-${x}-${y}`));// Text (tspan lines)\nconst textX=x+width/2;const textY=y+config.paddingY+config.lineHeight;// first baseline\nout.nodes.push(/*#__PURE__*/_jsx(\"text\",{x:textX,y:textY,textAnchor:\"middle\",fontSize:\"12\",fill:\"#111\",style:{fontFamily:\"system-ui, -apple-system, Segoe UI, Roboto, sans-serif\"},children:lines.map((ln,i)=>/*#__PURE__*/_jsx(\"tspan\",{x:textX,dy:i===0?0:config.lineHeight,children:ln},i))},`text-${node.id||node.name}-${x}-${y}`));// Links\nconst children=Array.isArray(node.children)?node.children:[];for(const child of children){const startX=x+width/2;const startY=y+height;const endX=child._layout.x+child._layout.width/2;const endY=child._layout.y;const midY=(startY+endY)/2;out.links.push(/*#__PURE__*/_jsx(\"path\",{d:`M${startX},${startY} V${midY} H${endX} V${endY}`,stroke:\"#888\",fill:\"none\",strokeWidth:\"1\"},`link-${node.id||node.name}->${child.id||child.name}`));// recurse\nrenderNode(child,config,out);}}function normalizeForest(tree){if(!tree)return[];return Array.isArray(tree)?tree:[tree];}export default function GraphView(_ref){let{tree}=_ref;const config=useMemo(()=>({// layout\nlevelGap:60,siblingGap:24,// text / boxes\nmaxCharsPerLine:24,charPx:7.2,lineHeight:16,paddingX:10,paddingY:8,minBoxWidth:120,minBoxHeight:36,// outer margin\nmargin:24}),[]);const{nodes,links,totalWidth,totalHeight}=useMemo(()=>{const forest=normalizeForest(tree);if(forest.length===0){return{nodes:[],links:[],totalWidth:800,totalHeight:200};}// 1) compute sizes for each root\nfor(const root of forest){computeSizes(root,config);}// 2) place roots left-to-right with forest gaps\nlet cursorX=config.margin;let maxBottom=0;for(const root of forest){assignPositions(root,cursorX,config.margin,config);cursorX+=root._layout.subtreeWidth+40;// gap between separate trees\nmaxBottom=Math.max(maxBottom,root._layout.y+root._layout.subtreeHeight);}// 3) render\nconst out={nodes:[],links:[]};for(const root of forest){renderNode(root,config,out);}const totalWidth=cursorX+config.margin-40;// remove last added gap\nconst totalHeight=maxBottom+config.margin;return{...out,totalWidth,totalHeight};},[tree,config]);return/*#__PURE__*/_jsxs(\"div\",{className:\"graph-view\",style:{marginTop:12},children:[/*#__PURE__*/_jsx(\"h3\",{style:{marginTop:0},children:\"SVG Tree Diagram\"}),/*#__PURE__*/_jsx(\"li\",{children:\"If the tree looks too small, use the \\\"Download SVG\\\" button to save the Tree Diagram to a separate file.\"}),/*#__PURE__*/_jsx(\"li\",{children:\" You may focus the Tree View to a smaller part of the tree.\"}),/*#__PURE__*/_jsx(\"li\",{children:\"You can view and possibly print the downloaded file with a browser.\"}),/*#__PURE__*/_jsx(\"li\",{children:\" Printing large SVG files is a separate subject... \\uD83D\\uDE0A\"}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsxs(\"svg\",{id:\"graph-svg\",width:\"100%\",height:Math.min(totalHeight,1200),viewBox:`0 0 ${Math.max(totalWidth,800)} ${totalHeight}`,style:{border:\"1px solid #ddd\",background:\"#fafafa\"},preserveAspectRatio:\"xMinYMin meet\",children:[links,nodes]})]});}","map":{"version":3,"names":["React","useMemo","jsx","_jsx","jsxs","_jsxs","wrapText","label","maxCharsPerLine","arguments","length","undefined","words","String","split","lines","line","w","i","push","slice","chunk","measureNodeBox","node","config","paddingX","paddingY","charPx","lineHeight","name","maxLen","Math","max","map","l","textW","textH","width","minBoxWidth","height","minBoxHeight","computeSizes","self","children","Array","isArray","_layout","subtreeWidth","subtreeHeight","childLayouts","c","totalChildrenWidth","reduce","acc","siblingGap","levelGap","assignPositions","leftX","topY","L","childrenLeft","x","y","cx","cy","child","renderNode","out","nodes","rx","ry","fill","stroke","strokeWidth","id","textX","textY","textAnchor","fontSize","style","fontFamily","ln","dy","startX","startY","endX","endY","midY","links","d","normalizeForest","tree","GraphView","_ref","margin","totalWidth","totalHeight","forest","root","cursorX","maxBottom","className","marginTop","min","viewBox","border","background","preserveAspectRatio"],"sources":["/home/jbrannigan/src/familytree/src/GraphView.js"],"sourcesContent":["// GraphView.js\r\nimport React, { useMemo } from \"react\";\r\n\r\n/**\r\n * Simple text wrapper that wraps on spaces, fallback to hard-break\r\n */\r\nfunction wrapText(label, maxCharsPerLine = 22) {\r\n  if (!label) return [\"\"];\r\n  const words = String(label).split(/\\s+/);\r\n  const lines = [];\r\n  let line = \"\";\r\n\r\n  for (const w of words) {\r\n    if (line.length === 0) {\r\n      // start a new line\r\n      if (w.length <= maxCharsPerLine) {\r\n        line = w;\r\n      } else {\r\n        // word longer than max: hard-break it\r\n        for (let i = 0; i < w.length; i += maxCharsPerLine) {\r\n          lines.push(w.slice(i, i + maxCharsPerLine));\r\n        }\r\n        line = \"\";\r\n      }\r\n    } else {\r\n      if ((line + \" \" + w).length <= maxCharsPerLine) {\r\n        line = line + \" \" + w;\r\n      } else {\r\n        lines.push(line);\r\n        if (w.length <= maxCharsPerLine) {\r\n          line = w;\r\n        } else {\r\n          for (let i = 0; i < w.length; i += maxCharsPerLine) {\r\n            const chunk = w.slice(i, i + maxCharsPerLine);\r\n            if (chunk.length === maxCharsPerLine) {\r\n              lines.push(chunk);\r\n            } else {\r\n              line = chunk; // last chunk becomes current line\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  if (line) lines.push(line);\r\n  return lines;\r\n}\r\n\r\n/**\r\n * Measure a node's box size from its text lines\r\n * We go monospaced-ish: ~7.2 px per char, 16px line height\r\n */\r\nfunction measureNodeBox(node, config) {\r\n  const { paddingX, paddingY, charPx, lineHeight } = config;\r\n  const lines = wrapText(node.name, config.maxCharsPerLine);\r\n  const maxLen = Math.max(...lines.map((l) => l.length), 1);\r\n  const textW = maxLen * charPx;\r\n  const textH = lines.length * lineHeight;\r\n  const width = Math.max(config.minBoxWidth, textW + paddingX * 2);\r\n  const height = Math.max(config.minBoxHeight, textH + paddingY * 2);\r\n  return { lines, width, height };\r\n}\r\n\r\n/**\r\n * Compute subtree width (for sibling spacing) and decorate nodes with layout info\r\n */\r\nfunction computeSizes(node, config) {\r\n  const self = measureNodeBox(node, config);\r\n  let children = Array.isArray(node.children) ? node.children : [];\r\n\r\n  if (children.length === 0) {\r\n    node._layout = {\r\n      ...self,\r\n      subtreeWidth: self.width,\r\n      subtreeHeight: self.height,\r\n    };\r\n    return node._layout;\r\n  }\r\n\r\n  // compute children sizes first\r\n  const childLayouts = children.map((c) => computeSizes(c, config));\r\n  const totalChildrenWidth =\r\n    childLayouts.reduce((acc, c) => acc + c.subtreeWidth, 0) +\r\n    config.siblingGap * (childLayouts.length - 1);\r\n  const subtreeWidth = Math.max(self.width, totalChildrenWidth);\r\n  const subtreeHeight =\r\n    self.height +\r\n    config.levelGap +\r\n    Math.max(...childLayouts.map((c) => c.subtreeHeight), 0);\r\n\r\n  node._layout = {\r\n    ...self,\r\n    subtreeWidth,\r\n    subtreeHeight,\r\n  };\r\n  return node._layout;\r\n}\r\n\r\n/**\r\n * Assign x,y positions, centering parent over children\r\n */\r\nfunction assignPositions(node, leftX, topY, config) {\r\n  const L = node._layout;\r\n  const children = Array.isArray(node.children) ? node.children : [];\r\n\r\n  // If has children, center parent over the children block.\r\n  if (children.length > 0) {\r\n    const totalChildrenWidth =\r\n      children.reduce((acc, c) => acc + c._layout.subtreeWidth, 0) +\r\n      config.siblingGap * (children.length - 1);\r\n    const childrenLeft = leftX + (L.subtreeWidth - totalChildrenWidth) / 2;\r\n\r\n    // parent x is centered over children span\r\n    node._layout.x = leftX + (L.subtreeWidth - L.width) / 2;\r\n    node._layout.y = topY;\r\n\r\n    // position children in a row\r\n    let cx = childrenLeft;\r\n    const cy = topY + L.height + config.levelGap;\r\n    for (const child of children) {\r\n      assignPositions(child, cx, cy, config);\r\n      cx += child._layout.subtreeWidth + config.siblingGap;\r\n    }\r\n  } else {\r\n    // leaf: center the box in its subtree width\r\n    node._layout.x = leftX + (L.subtreeWidth - L.width) / 2;\r\n    node._layout.y = topY;\r\n  }\r\n}\r\n\r\n/**\r\n * Render a node (box + text) and links to children\r\n */\r\nfunction renderNode(node, config, out) {\r\n  const L = node._layout;\r\n  const { x, y, width, height, lines } = L;\r\n\r\n  // Box\r\n  out.nodes.push(\r\n    <rect\r\n      key={`box-${node.id || node.name}-${x}-${y}`}\r\n      x={x}\r\n      y={y}\r\n      width={width}\r\n      height={height}\r\n      rx={8}\r\n      ry={8}\r\n      fill=\"#fff\"\r\n      stroke=\"#444\"\r\n      strokeWidth=\"1.25\"\r\n    />\r\n  );\r\n\r\n  // Text (tspan lines)\r\n  const textX = x + width / 2;\r\n  const textY = y + config.paddingY + config.lineHeight; // first baseline\r\n  out.nodes.push(\r\n    <text\r\n      key={`text-${node.id || node.name}-${x}-${y}`}\r\n      x={textX}\r\n      y={textY}\r\n      textAnchor=\"middle\"\r\n      fontSize=\"12\"\r\n      fill=\"#111\"\r\n      style={{ fontFamily: \"system-ui, -apple-system, Segoe UI, Roboto, sans-serif\" }}\r\n    >\r\n      {lines.map((ln, i) => (\r\n        <tspan key={i} x={textX} dy={i === 0 ? 0 : config.lineHeight}>\r\n          {ln}\r\n        </tspan>\r\n      ))}\r\n    </text>\r\n  );\r\n\r\n  // Links\r\n  const children = Array.isArray(node.children) ? node.children : [];\r\n  for (const child of children) {\r\n    const startX = x + width / 2;\r\n    const startY = y + height;\r\n    const endX = child._layout.x + child._layout.width / 2;\r\n    const endY = child._layout.y;\r\n    const midY = (startY + endY) / 2;\r\n\r\n    out.links.push(\r\n      <path\r\n        key={`link-${(node.id || node.name)}->${(child.id || child.name)}`}\r\n        d={`M${startX},${startY} V${midY} H${endX} V${endY}`}\r\n        stroke=\"#888\"\r\n        fill=\"none\"\r\n        strokeWidth=\"1\"\r\n      />\r\n    );\r\n\r\n    // recurse\r\n    renderNode(child, config, out);\r\n  }\r\n}\r\n\r\nfunction normalizeForest(tree) {\r\n  if (!tree) return [];\r\n  return Array.isArray(tree) ? tree : [tree];\r\n}\r\n\r\nexport default function GraphView({ tree }) {\r\n  const config = useMemo(\r\n    () => ({\r\n      // layout\r\n      levelGap: 60,\r\n      siblingGap: 24,\r\n      // text / boxes\r\n      maxCharsPerLine: 24,\r\n      charPx: 7.2,\r\n      lineHeight: 16,\r\n      paddingX: 10,\r\n      paddingY: 8,\r\n      minBoxWidth: 120,\r\n      minBoxHeight: 36,\r\n      // outer margin\r\n      margin: 24,\r\n    }),\r\n    []\r\n  );\r\n\r\n  const { nodes, links, totalWidth, totalHeight } = useMemo(() => {\r\n    const forest = normalizeForest(tree);\r\n    if (forest.length === 0) {\r\n      return { nodes: [], links: [], totalWidth: 800, totalHeight: 200 };\r\n    }\r\n\r\n    // 1) compute sizes for each root\r\n    for (const root of forest) {\r\n      computeSizes(root, config);\r\n    }\r\n\r\n    // 2) place roots left-to-right with forest gaps\r\n    let cursorX = config.margin;\r\n    let maxBottom = 0;\r\n    for (const root of forest) {\r\n      assignPositions(root, cursorX, config.margin, config);\r\n      cursorX += root._layout.subtreeWidth + 40; // gap between separate trees\r\n      maxBottom = Math.max(maxBottom, root._layout.y + root._layout.subtreeHeight);\r\n    }\r\n\r\n    // 3) render\r\n    const out = { nodes: [], links: [] };\r\n    for (const root of forest) {\r\n      renderNode(root, config, out);\r\n    }\r\n\r\n    const totalWidth = cursorX + config.margin - 40; // remove last added gap\r\n    const totalHeight = maxBottom + config.margin;\r\n\r\n    return { ...out, totalWidth, totalHeight };\r\n  }, [tree, config]);\r\n\r\n  return (\r\n    <div className=\"graph-view\" style={{ marginTop: 12 }}>\r\n      <h3 style={{ marginTop: 0 }}>SVG Tree Diagram</h3>\r\n      <li>If the tree looks too small, use the \"Download SVG\" button to save \r\n        the Tree Diagram to a separate file.</li>\r\n      <li> You may focus the Tree View to a smaller part of the tree.</li>\r\n      <li>You can view and possibly print the downloaded \r\n        file with a browser.</li>\r\n      <li> Printing large SVG files is a \r\n          separate subject... 😊</li>\r\n      <br></br>\r\n      <svg\r\n        id=\"graph-svg\"\r\n        width=\"100%\"\r\n        height={Math.min(totalHeight, 1200)}\r\n        viewBox={`0 0 ${Math.max(totalWidth, 800)} ${totalHeight}`}\r\n        style={{ border: \"1px solid #ddd\", background: \"#fafafa\" }}\r\n        preserveAspectRatio=\"xMinYMin meet\"\r\n      >\r\n        {links}\r\n        {nodes}\r\n      </svg>\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}