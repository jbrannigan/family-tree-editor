{"ast":null,"code":"var _jsxFileName = \"/home/jbrannigan/src/familytree/src/GraphView.js\",\n  _s = $RefreshSig$();\n// GraphView.js\nimport React, { useMemo } from \"react\";\n\n/** Simple tidy layout for an array of roots */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction layoutTree(nodes, cfg = {}) {\n  var _cfg$boxW, _cfg$boxH, _cfg$hGap, _cfg$wGap, _cfg$pad;\n  const boxW = (_cfg$boxW = cfg.boxW) !== null && _cfg$boxW !== void 0 ? _cfg$boxW : 140;\n  const boxH = (_cfg$boxH = cfg.boxH) !== null && _cfg$boxH !== void 0 ? _cfg$boxH : 40;\n  const hGap = (_cfg$hGap = cfg.hGap) !== null && _cfg$hGap !== void 0 ? _cfg$hGap : 24; // vertical gap between parent/children\n  const wGap = (_cfg$wGap = cfg.wGap) !== null && _cfg$wGap !== void 0 ? _cfg$wGap : 24; // horizontal gap between siblings\n  const pad = (_cfg$pad = cfg.pad) !== null && _cfg$pad !== void 0 ? _cfg$pad : 24;\n\n  // compute subtree sizes & positions\n  function measure(node) {\n    if (!node || !Array.isArray(node.children) || node.children.length === 0) {\n      return {\n        width: boxW,\n        height: boxH,\n        node\n      };\n    }\n    const childrenMeasures = node.children.map(measure);\n    const totalWidth = childrenMeasures.reduce((acc, m) => acc + m.width, 0) + (childrenMeasures.length - 1) * wGap;\n    const width = Math.max(boxW, totalWidth);\n    const height = boxH + hGap + Math.max(...childrenMeasures.map(m => m.height));\n    return {\n      width,\n      height,\n      node,\n      childrenMeasures\n    };\n  }\n  function place(node, left, top) {\n    var _node$id;\n    const m = measure(node);\n    const centerX = left + m.width / 2;\n    const me = {\n      id: (_node$id = node.id) !== null && _node$id !== void 0 ? _node$id : node.name,\n      name: node.name,\n      x: Math.round(centerX - boxW / 2),\n      y: Math.round(top),\n      w: boxW,\n      h: boxH\n    };\n    const nodesOut = [me];\n    const linksOut = [];\n    if (m.childrenMeasures) {\n      const totalChildrenWidth = m.childrenMeasures.reduce((acc, cm) => acc + cm.width, 0) + (m.childrenMeasures.length - 1) * wGap;\n      let childLeft = left + (m.width - totalChildrenWidth) / 2;\n      const childTop = top + boxH + hGap;\n      node.children.forEach((child, idx) => {\n        const cm = m.childrenMeasures[idx];\n        const placed = place(child, childLeft, childTop);\n        nodesOut.push(...placed.nodes);\n        linksOut.push({\n          from: {\n            x: me.x + me.w / 2,\n            y: me.y + me.h\n          },\n          to: {\n            x: placed.anchorX,\n            y: childTop\n          }\n        });\n        linksOut.push(...placed.links);\n        childLeft += cm.width + wGap;\n      });\n    }\n    return {\n      nodes: nodesOut,\n      links: linksOut,\n      anchorX: me.x + me.w / 2,\n      width: m.width,\n      height: m.height\n    };\n  }\n\n  // stack multiple roots vertically\n  let yCursor = pad;\n  const allNodes = [];\n  const allLinks = [];\n  let maxW = 0;\n  (nodes !== null && nodes !== void 0 ? nodes : []).forEach(root => {\n    const placed = place(root, pad, yCursor);\n    allNodes.push(...placed.nodes);\n    allLinks.push(...placed.links);\n    yCursor += placed.height + pad; // gap between roots\n    maxW = Math.max(maxW, placed.width + pad * 2);\n  });\n  const totalH = yCursor;\n  return {\n    nodes: allNodes,\n    links: allLinks,\n    width: Math.max(maxW, 300),\n    height: Math.max(totalH, 200)\n  };\n}\nexport default function GraphView({\n  tree\n}) {\n  _s();\n  const roots = Array.isArray(tree) ? tree : tree ? [tree] : [];\n  const {\n    nodes,\n    links,\n    width,\n    height\n  } = useMemo(() => layoutTree(roots), [roots]);\n  if (roots.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        padding: 8,\n        color: \"#666\"\n      },\n      children: \"No SVG preview\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      border: \"1px solid #ddd\",\n      background: \"#fafafa\",\n      marginTop: 8\n    },\n    children: /*#__PURE__*/_jsxDEV(\"svg\", {\n      id: \"graph-svg\",\n      width: \"100%\",\n      height: height,\n      viewBox: `0 0 ${width} ${height}`,\n      preserveAspectRatio: \"xMinYMin meet\",\n      children: [links.map((l, i) => {\n        const midY = (l.from.y + l.to.y) / 2;\n        const d = `M ${l.from.x} ${l.from.y} V ${midY} H ${l.to.x} V ${l.to.y}`;\n        return /*#__PURE__*/_jsxDEV(\"path\", {\n          d: d,\n          stroke: \"#555\",\n          strokeWidth: \"1.5\",\n          fill: \"none\"\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 18\n        }, this);\n      }), nodes.map(n => /*#__PURE__*/_jsxDEV(\"g\", {\n        children: [/*#__PURE__*/_jsxDEV(\"rect\", {\n          x: n.x,\n          y: n.y,\n          width: n.w,\n          height: n.h,\n          rx: \"8\",\n          ry: \"8\",\n          fill: \"#f7f7f7\",\n          stroke: \"#bbb\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n          x: n.x + n.w / 2,\n          y: n.y + n.h / 2 + 4,\n          textAnchor: \"middle\",\n          fontSize: \"12\",\n          fill: \"#333\",\n          children: n.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 13\n        }, this)]\n      }, n.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this);\n}\n_s(GraphView, \"bwda34WnHqYmHHUUwOFTbSLAOeU=\");\n_c = GraphView;\nvar _c;\n$RefreshReg$(_c, \"GraphView\");","map":{"version":3,"names":["React","useMemo","jsxDEV","_jsxDEV","layoutTree","nodes","cfg","_cfg$boxW","_cfg$boxH","_cfg$hGap","_cfg$wGap","_cfg$pad","boxW","boxH","hGap","wGap","pad","measure","node","Array","isArray","children","length","width","height","childrenMeasures","map","totalWidth","reduce","acc","m","Math","max","place","left","top","_node$id","centerX","me","id","name","x","round","y","w","h","nodesOut","linksOut","totalChildrenWidth","cm","childLeft","childTop","forEach","child","idx","placed","push","from","to","anchorX","links","yCursor","allNodes","allLinks","maxW","root","totalH","GraphView","tree","_s","roots","style","padding","color","fileName","_jsxFileName","lineNumber","columnNumber","border","background","marginTop","viewBox","preserveAspectRatio","l","i","midY","d","stroke","strokeWidth","fill","n","rx","ry","textAnchor","fontSize","_c","$RefreshReg$"],"sources":["/home/jbrannigan/src/familytree/src/GraphView.js"],"sourcesContent":["// GraphView.js\r\nimport React, { useMemo } from \"react\";\r\n\r\n/** Simple tidy layout for an array of roots */\r\nfunction layoutTree(nodes, cfg = {}) {\r\n  const boxW = cfg.boxW ?? 140;\r\n  const boxH = cfg.boxH ?? 40;\r\n  const hGap = cfg.hGap ?? 24;   // vertical gap between parent/children\r\n  const wGap = cfg.wGap ?? 24;   // horizontal gap between siblings\r\n  const pad  = cfg.pad  ?? 24;\r\n\r\n  // compute subtree sizes & positions\r\n  function measure(node) {\r\n    if (!node || !Array.isArray(node.children) || node.children.length === 0) {\r\n      return { width: boxW, height: boxH, node };\r\n    }\r\n    const childrenMeasures = node.children.map(measure);\r\n    const totalWidth =\r\n      childrenMeasures.reduce((acc, m) => acc + m.width, 0) +\r\n      (childrenMeasures.length - 1) * wGap;\r\n    const width = Math.max(boxW, totalWidth);\r\n    const height = boxH + hGap + Math.max(...childrenMeasures.map(m => m.height));\r\n    return { width, height, node, childrenMeasures };\r\n  }\r\n\r\n  function place(node, left, top) {\r\n    const m = measure(node);\r\n    const centerX = left + m.width / 2;\r\n\r\n    const me = {\r\n      id: node.id ?? node.name,\r\n      name: node.name,\r\n      x: Math.round(centerX - boxW / 2),\r\n      y: Math.round(top),\r\n      w: boxW,\r\n      h: boxH,\r\n    };\r\n\r\n    const nodesOut = [me];\r\n    const linksOut = [];\r\n\r\n    if (m.childrenMeasures) {\r\n      const totalChildrenWidth =\r\n        m.childrenMeasures.reduce((acc, cm) => acc + cm.width, 0) +\r\n        (m.childrenMeasures.length - 1) * wGap;\r\n\r\n      let childLeft = left + (m.width - totalChildrenWidth) / 2;\r\n      const childTop = top + boxH + hGap;\r\n\r\n      node.children.forEach((child, idx) => {\r\n        const cm = m.childrenMeasures[idx];\r\n        const placed = place(child, childLeft, childTop);\r\n        nodesOut.push(...placed.nodes);\r\n        linksOut.push({\r\n          from: { x: me.x + me.w / 2, y: me.y + me.h },\r\n          to:   { x: placed.anchorX,   y: childTop },\r\n        });\r\n        linksOut.push(...placed.links);\r\n        childLeft += cm.width + wGap;\r\n      });\r\n    }\r\n\r\n    return { nodes: nodesOut, links: linksOut, anchorX: me.x + me.w / 2, width: m.width, height: m.height };\r\n  }\r\n\r\n  // stack multiple roots vertically\r\n  let yCursor = pad;\r\n  const allNodes = [];\r\n  const allLinks = [];\r\n  let maxW = 0;\r\n\r\n  (nodes ?? []).forEach((root) => {\r\n    const placed = place(root, pad, yCursor);\r\n    allNodes.push(...placed.nodes);\r\n    allLinks.push(...placed.links);\r\n    yCursor += placed.height + pad; // gap between roots\r\n    maxW = Math.max(maxW, placed.width + pad * 2);\r\n  });\r\n\r\n  const totalH = yCursor;\r\n  return { nodes: allNodes, links: allLinks, width: Math.max(maxW, 300), height: Math.max(totalH, 200) };\r\n}\r\n\r\nexport default function GraphView({ tree }) {\r\n  const roots = Array.isArray(tree) ? tree : (tree ? [tree] : []);\r\n\r\n  const { nodes, links, width, height } = useMemo(\r\n    () => layoutTree(roots),\r\n    [roots]\r\n  );\r\n\r\n  if (roots.length === 0) {\r\n    return <div style={{ padding: 8, color: \"#666\" }}>No SVG preview</div>;\r\n  }\r\n\r\n  return (\r\n    \r\n    <div style={{ border: \"1px solid #ddd\", background: \"#fafafa\", marginTop: 8 }}>\r\n      <svg\r\n        id=\"graph-svg\"\r\n        width=\"100%\"\r\n        height={height}\r\n        viewBox={`0 0 ${width} ${height}`}\r\n        preserveAspectRatio=\"xMinYMin meet\"\r\n      >\r\n        {/* links (orthogonal) */}\r\n        {links.map((l, i) => {\r\n          const midY = (l.from.y + l.to.y) / 2;\r\n          const d = `M ${l.from.x} ${l.from.y} V ${midY} H ${l.to.x} V ${l.to.y}`;\r\n          return <path key={i} d={d} stroke=\"#555\" strokeWidth=\"1.5\" fill=\"none\" />;\r\n        })}\r\n\r\n        {/* nodes */}\r\n        {nodes.map((n) => (\r\n          <g key={n.id}>\r\n            <rect\r\n              x={n.x}\r\n              y={n.y}\r\n              width={n.w}\r\n              height={n.h}\r\n              rx=\"8\"\r\n              ry=\"8\"\r\n              fill=\"#f7f7f7\"\r\n              stroke=\"#bbb\"\r\n            />\r\n            <text\r\n              x={n.x + n.w / 2}\r\n              y={n.y + n.h / 2 + 4}\r\n              textAnchor=\"middle\"\r\n              fontSize=\"12\"\r\n              fill=\"#333\"\r\n            >\r\n              {n.name}\r\n            </text>\r\n          </g>\r\n        ))}\r\n      </svg>\r\n    </div>\r\n    \r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}