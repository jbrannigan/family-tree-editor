{"ast":null,"code":"var _jsxFileName = \"/home/jbrannigan/src/familytree/src/GraphView.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction drawTree(svg, node, x, y, levelGap, siblingGap, parentX = null, parentY = null) {\n  const boxWidth = 120;\n  const boxHeight = 40;\n  const padding = 10;\n\n  // Draw connection from parent\n  if (parentX !== null && parentY !== null) {\n    const startX = parentX + boxWidth / 2;\n    const startY = parentY + boxHeight;\n    const endX = x + boxWidth / 2;\n    const endY = y;\n    const midY = (startY + endY) / 2;\n    const path = document.createElementNS(\"http://www.w3.org/2000/svg\", \"path\");\n    path.setAttribute(\"d\", `M${startX},${startY} V${midY} H${endX} V${endY}`);\n    path.setAttribute(\"stroke\", \"#555\");\n    path.setAttribute(\"fill\", \"transparent\");\n    path.setAttribute(\"stroke-width\", \"2\");\n    svg.appendChild(path);\n  }\n\n  // Draw box\n  const rect = document.createElementNS(\"http://www.w3.org/2000/svg\", \"rect\");\n  rect.setAttribute(\"x\", x);\n  rect.setAttribute(\"y\", y);\n  rect.setAttribute(\"width\", boxWidth);\n  rect.setAttribute(\"height\", boxHeight);\n  rect.setAttribute(\"rx\", \"8\");\n  rect.setAttribute(\"ry\", \"8\");\n  rect.setAttribute(\"fill\", \"#ddd\");\n  rect.setAttribute(\"stroke\", \"#555\");\n  svg.appendChild(rect);\n\n  // Add text\n  const text = document.createElementNS(\"http://www.w3.org/2000/svg\", \"text\");\n  text.setAttribute(\"x\", x + boxWidth / 2);\n  text.setAttribute(\"y\", y + boxHeight / 2 + 5);\n  text.setAttribute(\"text-anchor\", \"middle\");\n  text.setAttribute(\"font-size\", \"12\");\n  text.setAttribute(\"fill\", \"#000\");\n  text.textContent = node.name;\n  svg.appendChild(text);\n\n  // Recursively draw children\n  if (node.children && node.children.length > 0) {\n    let childX = x - (node.children.length - 1) * (boxWidth + siblingGap) / 2;\n    node.children.forEach(child => {\n      drawTree(svg, child, childX, y + boxHeight + levelGap, levelGap, siblingGap, x, y);\n      childX += boxWidth + siblingGap;\n    });\n  }\n}\nfunction GraphView({\n  tree\n}) {\n  _s();\n  const svgRef = useRef();\n  useEffect(() => {\n    const svg = svgRef.current;\n    while (svg.firstChild) svg.removeChild(svg.firstChild);\n    if (tree && typeof tree === \"object\") {\n      drawTree(svg, tree, 500, 20, 80, 30);\n    }\n  }, [tree]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"graph-view\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"SVG Tree Diagram\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: svgRef,\n      width: \"1000\",\n      height: \"2000\",\n      style: {\n        border: \"1px solid #ccc\",\n        background: \"#fafafa\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n}\n_s(GraphView, \"89Ty783ABEwsfMbSOeu9vscWF34=\");\n_c = GraphView;\nexport default GraphView;\nvar _c;\n$RefreshReg$(_c, \"GraphView\");","map":{"version":3,"names":["React","useEffect","useRef","jsxDEV","_jsxDEV","drawTree","svg","node","x","y","levelGap","siblingGap","parentX","parentY","boxWidth","boxHeight","padding","startX","startY","endX","endY","midY","path","document","createElementNS","setAttribute","appendChild","rect","text","textContent","name","children","length","childX","forEach","child","GraphView","tree","_s","svgRef","current","firstChild","removeChild","className","fileName","_jsxFileName","lineNumber","columnNumber","ref","width","height","style","border","background","_c","$RefreshReg$"],"sources":["/home/jbrannigan/src/familytree/src/GraphView.js"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\r\n\r\nfunction drawTree(svg, node, x, y, levelGap, siblingGap, parentX = null, parentY = null) {\r\n  const boxWidth = 120;\r\n  const boxHeight = 40;\r\n  const padding = 10;\r\n\r\n  // Draw connection from parent\r\n  if (parentX !== null && parentY !== null) {\r\n    const startX = parentX + boxWidth / 2;\r\n    const startY = parentY + boxHeight;\r\n    const endX = x + boxWidth / 2;\r\n    const endY = y;\r\n    const midY = (startY + endY) / 2;\r\n\r\n    const path = document.createElementNS(\"http://www.w3.org/2000/svg\", \"path\");\r\n    path.setAttribute(\"d\", `M${startX},${startY} V${midY} H${endX} V${endY}`);\r\n    path.setAttribute(\"stroke\", \"#555\");\r\n    path.setAttribute(\"fill\", \"transparent\");\r\n    path.setAttribute(\"stroke-width\", \"2\");\r\n    svg.appendChild(path);\r\n  }\r\n\r\n  // Draw box\r\n  const rect = document.createElementNS(\"http://www.w3.org/2000/svg\", \"rect\");\r\n  rect.setAttribute(\"x\", x);\r\n  rect.setAttribute(\"y\", y);\r\n  rect.setAttribute(\"width\", boxWidth);\r\n  rect.setAttribute(\"height\", boxHeight);\r\n  rect.setAttribute(\"rx\", \"8\");\r\n  rect.setAttribute(\"ry\", \"8\");\r\n  rect.setAttribute(\"fill\", \"#ddd\");\r\n  rect.setAttribute(\"stroke\", \"#555\");\r\n  svg.appendChild(rect);\r\n\r\n  // Add text\r\n  const text = document.createElementNS(\"http://www.w3.org/2000/svg\", \"text\");\r\n  text.setAttribute(\"x\", x + boxWidth / 2);\r\n  text.setAttribute(\"y\", y + boxHeight / 2 + 5);\r\n  text.setAttribute(\"text-anchor\", \"middle\");\r\n  text.setAttribute(\"font-size\", \"12\");\r\n  text.setAttribute(\"fill\", \"#000\");\r\n  text.textContent = node.name;\r\n  svg.appendChild(text);\r\n\r\n  // Recursively draw children\r\n  if (node.children && node.children.length > 0) {\r\n    let childX = x - ((node.children.length - 1) * (boxWidth + siblingGap)) / 2;\r\n    node.children.forEach((child) => {\r\n      drawTree(svg, child, childX, y + boxHeight + levelGap, levelGap, siblingGap, x, y);\r\n      childX += boxWidth + siblingGap;\r\n    });\r\n  }\r\n}\r\n\r\nfunction GraphView({ tree }) {\r\n  const svgRef = useRef();\r\n\r\nuseEffect(() => {\r\n  const svg = svgRef.current;\r\n  while (svg.firstChild) svg.removeChild(svg.firstChild);\r\n  if (tree && typeof tree === \"object\") {\r\n    drawTree(svg, tree, 500, 20, 80, 30);\r\n  }\r\n}, [tree]);\r\n\r\n\r\n  return (\r\n    <div className=\"graph-view\">\r\n      <h2>SVG Tree Diagram</h2>\r\n      <svg\r\n        ref={svgRef}\r\n        width=\"1000\"\r\n        height=\"2000\"\r\n        style={{ border: \"1px solid #ccc\", background: \"#fafafa\" }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GraphView;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}