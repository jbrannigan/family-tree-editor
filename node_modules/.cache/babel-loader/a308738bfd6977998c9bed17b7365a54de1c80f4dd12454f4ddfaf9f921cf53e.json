{"ast":null,"code":"var _jsxFileName = \"/home/jbrannigan/src/familytree/src/TreeView.js\";\n// TreeView.js\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TreeNode = ({\n  node,\n  onFocus\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"li\", {\n    children: [node.name, \" \", /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => onFocus(node),\n      children: \"Focus\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 7\n    }, this), node.children && node.children.length > 0 && /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: node.children.map((child, index) => /*#__PURE__*/_jsxDEV(TreeNode, {\n        node: child,\n        onFocus: onFocus\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 5\n  }, this);\n};\n_c = TreeNode;\nconst TreeView = ({\n  tree,\n  onFocus\n}) => {\n  if (!tree) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"No tree data available\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 21\n  }, this);\n\n  // ðŸ‘‡ Ensure it's an array before mapping\n  const treeArray = Array.isArray(tree) ? tree : [tree];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Tree View (Collapsible)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: treeArray.map((node, index) => /*#__PURE__*/_jsxDEV(TreeNode, {\n        node: node,\n        onFocus: onFocus\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n};\n_c2 = TreeView;\nexport default TreeView;\nvar _c, _c2;\n$RefreshReg$(_c, \"TreeNode\");\n$RefreshReg$(_c2, \"TreeView\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","TreeNode","node","onFocus","children","name","onClick","fileName","_jsxFileName","lineNumber","columnNumber","length","map","child","index","_c","TreeView","tree","treeArray","Array","isArray","_c2","$RefreshReg$"],"sources":["/home/jbrannigan/src/familytree/src/TreeView.js"],"sourcesContent":["// TreeView.js\r\nimport React from \"react\";\r\n\r\nconst TreeNode = ({ node, onFocus }) => {\r\n  return (\r\n    <li>\r\n      {node.name}{\" \"}\r\n      <button onClick={() => onFocus(node)}>Focus</button>\r\n      {node.children && node.children.length > 0 && (\r\n        <ul>\r\n          {node.children.map((child, index) => (\r\n            <TreeNode key={index} node={child} onFocus={onFocus} />\r\n          ))}\r\n        </ul>\r\n      )}\r\n    </li>\r\n  );\r\n};\r\n\r\nconst TreeView = ({ tree, onFocus }) => {\r\n  if (!tree) return <div>No tree data available</div>;\r\n\r\n  // ðŸ‘‡ Ensure it's an array before mapping\r\n  const treeArray = Array.isArray(tree) ? tree : [tree];\r\n\r\n  return (\r\n    <div>\r\n      <h3>Tree View (Collapsible)</h3>\r\n      <ul>\r\n        {treeArray.map((node, index) => (\r\n          <TreeNode key={index} node={node} onFocus={onFocus} />\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TreeView;\r\n"],"mappings":";AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,QAAQ,GAAGA,CAAC;EAAEC,IAAI;EAAEC;AAAQ,CAAC,KAAK;EACtC,oBACEH,OAAA;IAAAI,QAAA,GACGF,IAAI,CAACG,IAAI,EAAE,GAAG,eACfL,OAAA;MAAQM,OAAO,EAAEA,CAAA,KAAMH,OAAO,CAACD,IAAI,CAAE;MAAAE,QAAA,EAAC;IAAK;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,EACnDR,IAAI,CAACE,QAAQ,IAAIF,IAAI,CAACE,QAAQ,CAACO,MAAM,GAAG,CAAC,iBACxCX,OAAA;MAAAI,QAAA,EACGF,IAAI,CAACE,QAAQ,CAACQ,GAAG,CAAC,CAACC,KAAK,EAAEC,KAAK,kBAC9Bd,OAAA,CAACC,QAAQ;QAAaC,IAAI,EAAEW,KAAM;QAACV,OAAO,EAAEA;MAAQ,GAArCW,KAAK;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAkC,CACvD;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CACL;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAET,CAAC;AAACK,EAAA,GAdId,QAAQ;AAgBd,MAAMe,QAAQ,GAAGA,CAAC;EAAEC,IAAI;EAAEd;AAAQ,CAAC,KAAK;EACtC,IAAI,CAACc,IAAI,EAAE,oBAAOjB,OAAA;IAAAI,QAAA,EAAK;EAAsB;IAAAG,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;;EAEnD;EACA,MAAMQ,SAAS,GAAGC,KAAK,CAACC,OAAO,CAACH,IAAI,CAAC,GAAGA,IAAI,GAAG,CAACA,IAAI,CAAC;EAErD,oBACEjB,OAAA;IAAAI,QAAA,gBACEJ,OAAA;MAAAI,QAAA,EAAI;IAAuB;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAChCV,OAAA;MAAAI,QAAA,EACGc,SAAS,CAACN,GAAG,CAAC,CAACV,IAAI,EAAEY,KAAK,kBACzBd,OAAA,CAACC,QAAQ;QAAaC,IAAI,EAAEA,IAAK;QAACC,OAAO,EAAEA;MAAQ,GAApCW,KAAK;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAiC,CACtD;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEV,CAAC;AAACW,GAAA,GAhBIL,QAAQ;AAkBd,eAAeA,QAAQ;AAAC,IAAAD,EAAA,EAAAM,GAAA;AAAAC,YAAA,CAAAP,EAAA;AAAAO,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}