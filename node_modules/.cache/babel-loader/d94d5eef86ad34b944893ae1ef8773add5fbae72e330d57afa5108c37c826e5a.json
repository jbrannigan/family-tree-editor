{"ast":null,"code":"// src/utils/generateHTML.js\n// Export a single function: generateHTML(tree)\n// tree can be an array of roots or a single root object.\n\nfunction ensureArray(tree) {\n  if (!tree) return [];\n  return Array.isArray(tree) ? tree : [tree];\n}\n\n// Assign stable ids if missing (used by focus/unfocus in the static HTML)\nfunction assignIds(nodes, prefix = \"n\") {\n  let counter = 0;\n  const walk = node => {\n    if (!node.id) node.id = `${prefix}-${counter++}`;\n    if (Array.isArray(node.children)) node.children.forEach(walk);\n  };\n  nodes.forEach(walk);\n  return nodes;\n}\nfunction escapeHTML(s = \"\") {\n  return String(s).replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\");\n}\n\n// Serialize tree to a plain object the static HTML can consume\nfunction serialize(nodes) {\n  const toPlain = n => ({\n    id: n.id,\n    name: n.name,\n    children: Array.isArray(n.children) ? n.children.map(toPlain) : []\n  });\n  return nodes.map(toPlain);\n}\nexport function generateHTML(tree) {\n  const roots = assignIds(ensureArray(tree));\n  const data = serialize(roots);\n  const json = escapeHTML(JSON.stringify(data));\n  return `<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"utf-8\" />\n<meta name=\"viewport\" content=\"width=device-width,initial-scale=1\" />\n<title>Family Tree (Static)</title>\n<style>\n  :root{\n    --text:#111; --muted:#666; --line:#d4d4d8; --accent:#0b6efd;\n    --bg:#fff; --bg-soft:#fafafa;\n  }\n  html,body{margin:0;padding:0;background:var(--bg);color:var(--text);font:14px/1.4 system-ui,-apple-system,Segoe UI,Roboto,Arial,sans-serif}\n  .wrap{max-width:1100px;margin:24px auto;padding:0 16px}\n  header{display:flex;align-items:center;gap:12px;flex-wrap:wrap;margin-bottom:12px}\n  h1{font-size:18px;margin:0 12px 0 0}\n  .btn{\n    border:1px solid #ccc;background:#fff;border-radius:8px;padding:6px 10px;cursor:pointer;\n  }\n  .btn:hover{border-color:#999}\n  .btn-ghost{border:0;background:transparent;color:var(--accent);padding:6px 8px}\n  .pill{background:#f5f5f5;border:1px solid #e5e5e5;border-radius:999px;padding:4px 10px;color:#333}\n  .tree{\n    padding:12px;border:1px solid #eee;background:var(--bg-soft);border-radius:10px;\n    overflow:auto\n  }\n\n  /* tree lines */\n  .ul{list-style:none;margin:0;padding-left:18px;position:relative}\n  .ul:before{\n    content:\"\";position:absolute;left:7px;top:0;bottom:0;border-left:1px solid var(--line)\n  }\n  .li{position:relative;padding-left:12px;margin:4px 0}\n  .li:before{\n    content:\"\";position:absolute;left:7px;top:11px;width:10px;border-top:1px solid var(--line)\n  }\n  .row{\n    display:flex;align-items:center;gap:8px;padding:2px 0;white-space:nowrap\n  }\n  .toggle{\n    width:16px;display:inline-block;user-select:none;cursor:pointer;color:var(--muted)\n  }\n  .toggle.hidden{visibility:hidden}\n  .name{font-weight:600}\n  .focus{\n    background:none;border:0;cursor:pointer;padding:0;margin-left:6px;color:var(--muted)\n  }\n  .focus:hover{color:var(--accent)}\n  .muted{color:var(--muted)}\n</style>\n</head>\n<body>\n<div class=\"wrap\">\n  <header>\n    <h1>Family Tree</h1>\n    <span class=\"pill\" id=\"countPill\"></span>\n    <button class=\"btn\" id=\"expandAll\">Expand all</button>\n    <button class=\"btn\" id=\"collapseAll\">Collapse all</button>\n    <span class=\"muted\" id=\"focusHint\"></span>\n    <button class=\"btn-ghost\" id=\"unfocusBtn\" style=\"display:none\">Unfocus</button>\n  </header>\n\n  <div class=\"tree\" id=\"treeRoot\"></div>\n</div>\n\n<script>\n  // ---- Data from app ----\n  const ROOTS = ${json};\n\n  // ---- State ----\n  let focusedId = null;\n  let expanded = Object.create(null); // id -> boolean\n\n  const el = {\n    root: document.getElementById('treeRoot'),\n    countPill: document.getElementById('countPill'),\n    expandAll: document.getElementById('expandAll'),\n    collapseAll: document.getElementById('collapseAll'),\n    unfocus: document.getElementById('unfocusBtn'),\n    focusHint: document.getElementById('focusHint'),\n  };\n\n  // ---- Helpers ----\n  function clone(obj){ return JSON.parse(JSON.stringify(obj)); }\n\n  function findNodeById(nodes, id){\n    for(const n of nodes){\n      if(n.id === id) return n;\n      if(n.children && n.children.length){\n        const found = findNodeById(n.children, id);\n        if(found) return found;\n      }\n    }\n    return null;\n  }\n\n  function visibleForest(){\n    if(!focusedId) return clone(ROOTS);\n    const hit = findNodeById(ROOTS, focusedId);\n    return hit ? [clone(hit)] : [];\n  }\n\n  function countNodes(nodes){\n    let c = 0;\n    (function walk(list){\n      for(const n of list){\n        c++;\n        if(n.children && n.children.length) walk(n.children);\n      }\n    })(nodes);\n    return c;\n  }\n\n  // ---- Render ----\n  function render(){\n    const forest = visibleForest();\n    el.countPill.textContent = countNodes(forest) + \" nodes\";\n    el.unfocus.style.display = focusedId ? \"\" : \"none\";\n    el.focusHint.textContent = focusedId ? \"(focused)\" : \"\";\n\n    el.root.innerHTML = \"\";\n    const container = document.createElement('div');\n\n    forest.forEach((root, idx) => {\n      container.appendChild(renderNode(root, 0, idx));\n    });\n\n    el.root.appendChild(container);\n  }\n\n  function renderNode(node, level, idx){\n    const li = document.createElement('div');\n    li.className = \"li\";\n\n    const row = document.createElement('div');\n    row.className = \"row\";\n\n    const hasChildren = node.children && node.children.length > 0;\n    const isExpanded = expanded[node.id] !== false; // default expanded\n\n    const tg = document.createElement('span');\n    tg.className = \"toggle\" + (hasChildren ? \"\" : \" hidden\");\n    tg.textContent = isExpanded ? \"▾\" : \"▸\";\n    tg.title = isExpanded ? \"Collapse\" : \"Expand\";\n    tg.onclick = () => { expanded[node.id] = !isExpanded; render(); };\n    row.appendChild(tg);\n\n    const name = document.createElement('span');\n    name.className = \"name\";\n    name.textContent = node.name || \"(unnamed)\";\n    row.appendChild(name);\n\n    const focusBtn = document.createElement('button');\n    focusBtn.className = \"focus\";\n    focusBtn.title = focusedId === node.id ? \"Unfocus\" : \"Focus\";\n    focusBtn.textContent = focusedId === node.id ? \"−\" : \"+\";\n    focusBtn.onclick = () => {\n      if (focusedId === node.id) {\n        focusedId = null;\n      } else {\n        focusedId = node.id;\n        // when focusing, auto-expand this node\n        expanded[node.id] = true;\n      }\n      render();\n    };\n    row.appendChild(focusBtn);\n\n    li.appendChild(row);\n\n    if (hasChildren && isExpanded){\n      const ul = document.createElement('div');\n      ul.className = \"ul\";\n      node.children.forEach((ch, i) => ul.appendChild(renderNode(ch, level+1, i)));\n      li.appendChild(ul);\n    }\n\n    return li;\n  }\n\n  // ---- Toolbar actions ----\n  el.expandAll.onclick = () => {\n    (function walk(list){\n      for(const n of list){\n        expanded[n.id] = true;\n        if(n.children && n.children.length) walk(n.children);\n      }\n    })(ROOTS);\n    render();\n  };\n\n  el.collapseAll.onclick = () => {\n    (function walk(list){\n      for(const n of list){\n        expanded[n.id] = false;\n        if(n.children && n.children.length) walk(n.children);\n      }\n    })(ROOTS);\n    render();\n  };\n\n  el.unfocus.onclick = () => { focusedId = null; render(); };\n\n  // first paint\n  render();\n</script>\n</body>\n</html>`;\n}","map":{"version":3,"names":["ensureArray","tree","Array","isArray","assignIds","nodes","prefix","counter","walk","node","id","children","forEach","escapeHTML","s","String","replace","serialize","toPlain","n","name","map","generateHTML","roots","data","json","JSON","stringify"],"sources":["/home/jbrannigan/src/familytree/src/utils/generateHTML.js"],"sourcesContent":["// src/utils/generateHTML.js\r\n// Export a single function: generateHTML(tree)\r\n// tree can be an array of roots or a single root object.\r\n\r\nfunction ensureArray(tree) {\r\n  if (!tree) return [];\r\n  return Array.isArray(tree) ? tree : [tree];\r\n}\r\n\r\n// Assign stable ids if missing (used by focus/unfocus in the static HTML)\r\nfunction assignIds(nodes, prefix = \"n\") {\r\n  let counter = 0;\r\n  const walk = (node) => {\r\n    if (!node.id) node.id = `${prefix}-${counter++}`;\r\n    if (Array.isArray(node.children)) node.children.forEach(walk);\r\n  };\r\n  nodes.forEach(walk);\r\n  return nodes;\r\n}\r\n\r\nfunction escapeHTML(s = \"\") {\r\n  return String(s)\r\n    .replace(/&/g, \"&amp;\")\r\n    .replace(/</g, \"&lt;\")\r\n    .replace(/>/g, \"&gt;\");\r\n}\r\n\r\n// Serialize tree to a plain object the static HTML can consume\r\nfunction serialize(nodes) {\r\n  const toPlain = (n) => ({\r\n    id: n.id,\r\n    name: n.name,\r\n    children: Array.isArray(n.children) ? n.children.map(toPlain) : [],\r\n  });\r\n  return nodes.map(toPlain);\r\n}\r\n\r\nexport function generateHTML(tree) {\r\n  const roots = assignIds(ensureArray(tree));\r\n  const data = serialize(roots);\r\n  const json = escapeHTML(JSON.stringify(data));\r\n\r\n  return `<!doctype html>\r\n<html lang=\"en\">\r\n<head>\r\n<meta charset=\"utf-8\" />\r\n<meta name=\"viewport\" content=\"width=device-width,initial-scale=1\" />\r\n<title>Family Tree (Static)</title>\r\n<style>\r\n  :root{\r\n    --text:#111; --muted:#666; --line:#d4d4d8; --accent:#0b6efd;\r\n    --bg:#fff; --bg-soft:#fafafa;\r\n  }\r\n  html,body{margin:0;padding:0;background:var(--bg);color:var(--text);font:14px/1.4 system-ui,-apple-system,Segoe UI,Roboto,Arial,sans-serif}\r\n  .wrap{max-width:1100px;margin:24px auto;padding:0 16px}\r\n  header{display:flex;align-items:center;gap:12px;flex-wrap:wrap;margin-bottom:12px}\r\n  h1{font-size:18px;margin:0 12px 0 0}\r\n  .btn{\r\n    border:1px solid #ccc;background:#fff;border-radius:8px;padding:6px 10px;cursor:pointer;\r\n  }\r\n  .btn:hover{border-color:#999}\r\n  .btn-ghost{border:0;background:transparent;color:var(--accent);padding:6px 8px}\r\n  .pill{background:#f5f5f5;border:1px solid #e5e5e5;border-radius:999px;padding:4px 10px;color:#333}\r\n  .tree{\r\n    padding:12px;border:1px solid #eee;background:var(--bg-soft);border-radius:10px;\r\n    overflow:auto\r\n  }\r\n\r\n  /* tree lines */\r\n  .ul{list-style:none;margin:0;padding-left:18px;position:relative}\r\n  .ul:before{\r\n    content:\"\";position:absolute;left:7px;top:0;bottom:0;border-left:1px solid var(--line)\r\n  }\r\n  .li{position:relative;padding-left:12px;margin:4px 0}\r\n  .li:before{\r\n    content:\"\";position:absolute;left:7px;top:11px;width:10px;border-top:1px solid var(--line)\r\n  }\r\n  .row{\r\n    display:flex;align-items:center;gap:8px;padding:2px 0;white-space:nowrap\r\n  }\r\n  .toggle{\r\n    width:16px;display:inline-block;user-select:none;cursor:pointer;color:var(--muted)\r\n  }\r\n  .toggle.hidden{visibility:hidden}\r\n  .name{font-weight:600}\r\n  .focus{\r\n    background:none;border:0;cursor:pointer;padding:0;margin-left:6px;color:var(--muted)\r\n  }\r\n  .focus:hover{color:var(--accent)}\r\n  .muted{color:var(--muted)}\r\n</style>\r\n</head>\r\n<body>\r\n<div class=\"wrap\">\r\n  <header>\r\n    <h1>Family Tree</h1>\r\n    <span class=\"pill\" id=\"countPill\"></span>\r\n    <button class=\"btn\" id=\"expandAll\">Expand all</button>\r\n    <button class=\"btn\" id=\"collapseAll\">Collapse all</button>\r\n    <span class=\"muted\" id=\"focusHint\"></span>\r\n    <button class=\"btn-ghost\" id=\"unfocusBtn\" style=\"display:none\">Unfocus</button>\r\n  </header>\r\n\r\n  <div class=\"tree\" id=\"treeRoot\"></div>\r\n</div>\r\n\r\n<script>\r\n  // ---- Data from app ----\r\n  const ROOTS = ${json};\r\n\r\n  // ---- State ----\r\n  let focusedId = null;\r\n  let expanded = Object.create(null); // id -> boolean\r\n\r\n  const el = {\r\n    root: document.getElementById('treeRoot'),\r\n    countPill: document.getElementById('countPill'),\r\n    expandAll: document.getElementById('expandAll'),\r\n    collapseAll: document.getElementById('collapseAll'),\r\n    unfocus: document.getElementById('unfocusBtn'),\r\n    focusHint: document.getElementById('focusHint'),\r\n  };\r\n\r\n  // ---- Helpers ----\r\n  function clone(obj){ return JSON.parse(JSON.stringify(obj)); }\r\n\r\n  function findNodeById(nodes, id){\r\n    for(const n of nodes){\r\n      if(n.id === id) return n;\r\n      if(n.children && n.children.length){\r\n        const found = findNodeById(n.children, id);\r\n        if(found) return found;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  function visibleForest(){\r\n    if(!focusedId) return clone(ROOTS);\r\n    const hit = findNodeById(ROOTS, focusedId);\r\n    return hit ? [clone(hit)] : [];\r\n  }\r\n\r\n  function countNodes(nodes){\r\n    let c = 0;\r\n    (function walk(list){\r\n      for(const n of list){\r\n        c++;\r\n        if(n.children && n.children.length) walk(n.children);\r\n      }\r\n    })(nodes);\r\n    return c;\r\n  }\r\n\r\n  // ---- Render ----\r\n  function render(){\r\n    const forest = visibleForest();\r\n    el.countPill.textContent = countNodes(forest) + \" nodes\";\r\n    el.unfocus.style.display = focusedId ? \"\" : \"none\";\r\n    el.focusHint.textContent = focusedId ? \"(focused)\" : \"\";\r\n\r\n    el.root.innerHTML = \"\";\r\n    const container = document.createElement('div');\r\n\r\n    forest.forEach((root, idx) => {\r\n      container.appendChild(renderNode(root, 0, idx));\r\n    });\r\n\r\n    el.root.appendChild(container);\r\n  }\r\n\r\n  function renderNode(node, level, idx){\r\n    const li = document.createElement('div');\r\n    li.className = \"li\";\r\n\r\n    const row = document.createElement('div');\r\n    row.className = \"row\";\r\n\r\n    const hasChildren = node.children && node.children.length > 0;\r\n    const isExpanded = expanded[node.id] !== false; // default expanded\r\n\r\n    const tg = document.createElement('span');\r\n    tg.className = \"toggle\" + (hasChildren ? \"\" : \" hidden\");\r\n    tg.textContent = isExpanded ? \"▾\" : \"▸\";\r\n    tg.title = isExpanded ? \"Collapse\" : \"Expand\";\r\n    tg.onclick = () => { expanded[node.id] = !isExpanded; render(); };\r\n    row.appendChild(tg);\r\n\r\n    const name = document.createElement('span');\r\n    name.className = \"name\";\r\n    name.textContent = node.name || \"(unnamed)\";\r\n    row.appendChild(name);\r\n\r\n    const focusBtn = document.createElement('button');\r\n    focusBtn.className = \"focus\";\r\n    focusBtn.title = focusedId === node.id ? \"Unfocus\" : \"Focus\";\r\n    focusBtn.textContent = focusedId === node.id ? \"−\" : \"+\";\r\n    focusBtn.onclick = () => {\r\n      if (focusedId === node.id) {\r\n        focusedId = null;\r\n      } else {\r\n        focusedId = node.id;\r\n        // when focusing, auto-expand this node\r\n        expanded[node.id] = true;\r\n      }\r\n      render();\r\n    };\r\n    row.appendChild(focusBtn);\r\n\r\n    li.appendChild(row);\r\n\r\n    if (hasChildren && isExpanded){\r\n      const ul = document.createElement('div');\r\n      ul.className = \"ul\";\r\n      node.children.forEach((ch, i) => ul.appendChild(renderNode(ch, level+1, i)));\r\n      li.appendChild(ul);\r\n    }\r\n\r\n    return li;\r\n  }\r\n\r\n  // ---- Toolbar actions ----\r\n  el.expandAll.onclick = () => {\r\n    (function walk(list){\r\n      for(const n of list){\r\n        expanded[n.id] = true;\r\n        if(n.children && n.children.length) walk(n.children);\r\n      }\r\n    })(ROOTS);\r\n    render();\r\n  };\r\n\r\n  el.collapseAll.onclick = () => {\r\n    (function walk(list){\r\n      for(const n of list){\r\n        expanded[n.id] = false;\r\n        if(n.children && n.children.length) walk(n.children);\r\n      }\r\n    })(ROOTS);\r\n    render();\r\n  };\r\n\r\n  el.unfocus.onclick = () => { focusedId = null; render(); };\r\n\r\n  // first paint\r\n  render();\r\n</script>\r\n</body>\r\n</html>`;\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;;AAEA,SAASA,WAAWA,CAACC,IAAI,EAAE;EACzB,IAAI,CAACA,IAAI,EAAE,OAAO,EAAE;EACpB,OAAOC,KAAK,CAACC,OAAO,CAACF,IAAI,CAAC,GAAGA,IAAI,GAAG,CAACA,IAAI,CAAC;AAC5C;;AAEA;AACA,SAASG,SAASA,CAACC,KAAK,EAAEC,MAAM,GAAG,GAAG,EAAE;EACtC,IAAIC,OAAO,GAAG,CAAC;EACf,MAAMC,IAAI,GAAIC,IAAI,IAAK;IACrB,IAAI,CAACA,IAAI,CAACC,EAAE,EAAED,IAAI,CAACC,EAAE,GAAG,GAAGJ,MAAM,IAAIC,OAAO,EAAE,EAAE;IAChD,IAAIL,KAAK,CAACC,OAAO,CAACM,IAAI,CAACE,QAAQ,CAAC,EAAEF,IAAI,CAACE,QAAQ,CAACC,OAAO,CAACJ,IAAI,CAAC;EAC/D,CAAC;EACDH,KAAK,CAACO,OAAO,CAACJ,IAAI,CAAC;EACnB,OAAOH,KAAK;AACd;AAEA,SAASQ,UAAUA,CAACC,CAAC,GAAG,EAAE,EAAE;EAC1B,OAAOC,MAAM,CAACD,CAAC,CAAC,CACbE,OAAO,CAAC,IAAI,EAAE,OAAO,CAAC,CACtBA,OAAO,CAAC,IAAI,EAAE,MAAM,CAAC,CACrBA,OAAO,CAAC,IAAI,EAAE,MAAM,CAAC;AAC1B;;AAEA;AACA,SAASC,SAASA,CAACZ,KAAK,EAAE;EACxB,MAAMa,OAAO,GAAIC,CAAC,KAAM;IACtBT,EAAE,EAAES,CAAC,CAACT,EAAE;IACRU,IAAI,EAAED,CAAC,CAACC,IAAI;IACZT,QAAQ,EAAET,KAAK,CAACC,OAAO,CAACgB,CAAC,CAACR,QAAQ,CAAC,GAAGQ,CAAC,CAACR,QAAQ,CAACU,GAAG,CAACH,OAAO,CAAC,GAAG;EAClE,CAAC,CAAC;EACF,OAAOb,KAAK,CAACgB,GAAG,CAACH,OAAO,CAAC;AAC3B;AAEA,OAAO,SAASI,YAAYA,CAACrB,IAAI,EAAE;EACjC,MAAMsB,KAAK,GAAGnB,SAAS,CAACJ,WAAW,CAACC,IAAI,CAAC,CAAC;EAC1C,MAAMuB,IAAI,GAAGP,SAAS,CAACM,KAAK,CAAC;EAC7B,MAAME,IAAI,GAAGZ,UAAU,CAACa,IAAI,CAACC,SAAS,CAACH,IAAI,CAAC,CAAC;EAE7C,OAAO;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkBC,IAAI;AACtignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}