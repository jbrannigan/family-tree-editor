{"ast":null,"code":"var _jsxFileName = \"/home/jbrannigan/src/familytree/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport TreeEditor from \"./TreeEditor\";\nimport TreeView from \"./TreeView\";\nimport GraphView from \"./GraphView\";\nimport UploadButton from \"./UploadButton\";\nimport DownloadButton from \"./DownloadButton\";\nimport { parseTree } from './utils/parseTree';\nimport { generateHTML } from './utils/generateHTML';\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [rawText, setRawText] = useState(\"\");\n  const [treeText, setTreeText] = useState(\"\");\n  const [treeData, setTreeData] = useState(null);\n  const [focusedNode, setFocusedNode] = useState(null);\n  useEffect(() => {\n    if (rawText.trim()) {\n      try {\n        const parsed = parseTree(rawText);\n        setTreeData(parsed);\n      } catch (err) {\n        console.error(\"Parsing failed:\", err);\n        setTreeData(null);\n      }\n    }\n  }, [rawText]);\n  const handleTextChange = text => {\n    setRawText(text);\n  };\n  const handleFileLoad = text => {\n    setTreeText(text);\n    const parsed = parseTree(text);\n    console.log(\"Parsed tree data:\", parsed);\n    setTreeData(parsed);\n  };\n  const [pinnedId, setPinnedId] = useState(null);\n  const handleFocus = id => {\n    if (pinnedId === id) {\n      setPinnedId(null); // unpin if already pinned\n    } else {\n      setPinnedId(id); // pin new node\n    }\n  };\n  const handleUnfocus = () => {\n    setFocusedNode(null);\n  };\n  const exportAsJSON = () => {\n    const dataStr = JSON.stringify(treeData, null, 2);\n    const blob = new Blob([dataStr], {\n      type: \"application/json\"\n    });\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement(\"a\");\n    link.href = url;\n    link.download = \"tree.json\";\n    link.click();\n  };\n  const exportAsHTML = () => {\n    const html = `<!DOCTYPE html><html><head><meta charset=\"UTF-8\">\n      <style>\n        .toggle-btn { cursor: pointer; font-weight: bold; }\n        .children { margin-left: 1em; }\n      </style></head><body>${generateHTML(treeData)}</body></html>`;\n    const blob = new Blob([html], {\n      type: \"text/html\"\n    });\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement(\"a\");\n    link.href = url;\n    link.download = \"tree.html\";\n    link.click();\n  };\n  const exportAsSVG = () => {\n    const svg = document.querySelector(\"#tree-svg\");\n    if (!svg) return;\n    const svgData = new XMLSerializer().serializeToString(svg);\n    const blob = new Blob([svgData], {\n      type: \"image/svg+xml\"\n    });\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement(\"a\");\n    link.href = url;\n    link.download = \"tree.svg\";\n    link.click();\n  };\n  const displayedTree = focusedNode || treeData;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"McGinty Family Tree Editor\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(UploadButton, {\n        onLoad: handleFileLoad\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DownloadButton, {\n        onDownload: exportAsJSON,\n        label: \"Download JSON\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DownloadButton, {\n        onDownload: exportAsHTML,\n        label: \"Download HTML\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DownloadButton, {\n        onDownload: exportAsSVG,\n        label: \"Download SVG\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this), focusedNode && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"unfocus-btn\",\n        onClick: handleUnfocus,\n        children: \"Unfocus\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"main\",\n      children: [/*#__PURE__*/_jsxDEV(TreeEditor, {\n        treeText: treeText,\n        setTreeText: setTreeText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this), displayedTree ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(TreeView, {\n          tree: displayedTree,\n          onFocus: handleFocus,\n          pinnedId: pinnedId\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(GraphView, {\n          tree: displayedTree\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading\",\n        children: \"Loading tree...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"g26uFhno13uFjni6T8zPB9tg8U8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","TreeEditor","TreeView","GraphView","UploadButton","DownloadButton","parseTree","generateHTML","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","rawText","setRawText","treeText","setTreeText","treeData","setTreeData","focusedNode","setFocusedNode","trim","parsed","err","console","error","handleTextChange","text","handleFileLoad","log","pinnedId","setPinnedId","handleFocus","id","handleUnfocus","exportAsJSON","dataStr","JSON","stringify","blob","Blob","type","url","URL","createObjectURL","link","document","createElement","href","download","click","exportAsHTML","html","exportAsSVG","svg","querySelector","svgData","XMLSerializer","serializeToString","displayedTree","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onLoad","onDownload","label","onClick","tree","onFocus","_c","$RefreshReg$"],"sources":["/home/jbrannigan/src/familytree/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport TreeEditor from \"./TreeEditor\";\r\nimport TreeView from \"./TreeView\";\r\nimport GraphView from \"./GraphView\";\r\nimport UploadButton from \"./UploadButton\";\r\nimport DownloadButton from \"./DownloadButton\";\r\nimport { parseTree } from './utils/parseTree';\r\nimport { generateHTML } from './utils/generateHTML';\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  const [rawText, setRawText] = useState(\"\");\r\n  const [treeText, setTreeText] = useState(\"\");\r\n  const [treeData, setTreeData] = useState(null);\r\n  const [focusedNode, setFocusedNode] = useState(null);\r\n\r\n  useEffect(() => {\r\n    if (rawText.trim()) {\r\n      try {\r\n        const parsed = parseTree(rawText);\r\n        setTreeData(parsed);\r\n      } catch (err) {\r\n        console.error(\"Parsing failed:\", err);\r\n        setTreeData(null);\r\n      }\r\n    }\r\n  }, [rawText]);\r\n\r\n  const handleTextChange = (text) => {\r\n    setRawText(text);\r\n  };\r\n\r\n  const handleFileLoad = (text) => {\r\n    setTreeText(text);\r\n    const parsed = parseTree(text);\r\n    console.log(\"Parsed tree data:\", parsed);\r\n    setTreeData(parsed);\r\n};\r\n\r\n\r\nconst [pinnedId, setPinnedId] = useState(null);\r\n\r\nconst handleFocus = (id) => {\r\n  if (pinnedId === id) {\r\n    setPinnedId(null); // unpin if already pinned\r\n  } else {\r\n    setPinnedId(id);   // pin new node\r\n  }\r\n};\r\n\r\n  const handleUnfocus = () => {\r\n    setFocusedNode(null);\r\n  };\r\n\r\n  const exportAsJSON = () => {\r\n    const dataStr = JSON.stringify(treeData, null, 2);\r\n    const blob = new Blob([dataStr], { type: \"application/json\" });\r\n    const url = URL.createObjectURL(blob);\r\n    const link = document.createElement(\"a\");\r\n    link.href = url;\r\n    link.download = \"tree.json\";\r\n    link.click();\r\n  };\r\n\r\n  const exportAsHTML = () => {\r\n    const html = `<!DOCTYPE html><html><head><meta charset=\"UTF-8\">\r\n      <style>\r\n        .toggle-btn { cursor: pointer; font-weight: bold; }\r\n        .children { margin-left: 1em; }\r\n      </style></head><body>${generateHTML(treeData)}</body></html>`;\r\n    const blob = new Blob([html], { type: \"text/html\" });\r\n    const url = URL.createObjectURL(blob);\r\n    const link = document.createElement(\"a\");\r\n    link.href = url;\r\n    link.download = \"tree.html\";\r\n    link.click();\r\n  };\r\n\r\n  const exportAsSVG = () => {\r\n    const svg = document.querySelector(\"#tree-svg\");\r\n    if (!svg) return;\r\n    const svgData = new XMLSerializer().serializeToString(svg);\r\n    const blob = new Blob([svgData], { type: \"image/svg+xml\" });\r\n    const url = URL.createObjectURL(blob);\r\n    const link = document.createElement(\"a\");\r\n    link.href = url;\r\n    link.download = \"tree.svg\";\r\n    link.click();\r\n  };\r\n\r\n  const displayedTree = focusedNode || treeData;\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <header className=\"header\">\r\n        <h1>McGinty Family Tree Editor</h1>\r\n        <UploadButton   onLoad={handleFileLoad} />\r\n        <DownloadButton onDownload={exportAsJSON} label=\"Download JSON\" />\r\n        <DownloadButton onDownload={exportAsHTML} label=\"Download HTML\" />\r\n        <DownloadButton onDownload={exportAsSVG} label=\"Download SVG\" />\r\n        {focusedNode && (\r\n          <button className=\"unfocus-btn\" onClick={handleUnfocus}>\r\n            Unfocus\r\n          </button>\r\n        )}\r\n      </header>\r\n      <main className=\"main\">\r\n        <TreeEditor treeText={treeText} setTreeText={setTreeText} />\r\n        {displayedTree ? (\r\n          <>\r\n            <TreeView \r\n              tree=     {displayedTree} \r\n              onFocus=  {handleFocus}\r\n              pinnedId= {pinnedId}\r\n              />\r\n            <GraphView tree={displayedTree} />\r\n          </>\r\n        ) : (\r\n          <div className=\"loading\">Loading tree...</div>\r\n        )}\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}