{"ast":null,"code":"export function generateHTML(treeData) {\n  const renderNode = node => {\n    const children = node.children && node.children.length ? `<ul>${node.children.map(renderNode).join(\"\")}</ul>` : \"\";\n    return `<li>${node.name}${children}</li>`;\n  };\n  let body = \"<p>No data</p>\";\n  if (Array.isArray(treeData)) {\n    body = treeData.length ? `<ul>${treeData.map(renderNode).join(\"\")}</ul>` : \"<p>No data</p>\";\n  } else if (treeData && typeof treeData === \"object\") {\n    body = `<ul>${renderNode(treeData)}</ul>`;\n  }\n  return `\n    <!DOCTYPE html>\n    <html>\n      <head>\n        <meta charset=\"UTF-8\" />\n        <title>Tree</title>\n        <style>\n          ul { list-style-type: none; margin: 0; padding-left: 1rem; }\n          li { margin: 4px 0; }\n        </style>\n      </head>\n      <body>\n        ${body}\n      </body>\n    </html>\n  `;\n}","map":{"version":3,"names":["generateHTML","treeData","renderNode","node","children","length","map","join","name","body","Array","isArray"],"sources":["/home/jbrannigan/src/familytree/src/utils/generateHTML.js"],"sourcesContent":["export function generateHTML(treeData) {\r\n  const renderNode = (node) => {\r\n    const children = node.children && node.children.length\r\n      ? `<ul>${node.children.map(renderNode).join(\"\")}</ul>`\r\n      : \"\";\r\n    return `<li>${node.name}${children}</li>`;\r\n  };\r\n\r\n  let body = \"<p>No data</p>\";\r\n  if (Array.isArray(treeData)) {\r\n    body = treeData.length ? `<ul>${treeData.map(renderNode).join(\"\")}</ul>` : \"<p>No data</p>\";\r\n  } else if (treeData && typeof treeData === \"object\") {\r\n    body = `<ul>${renderNode(treeData)}</ul>`;\r\n  }\r\n\r\n  return `\r\n    <!DOCTYPE html>\r\n    <html>\r\n      <head>\r\n        <meta charset=\"UTF-8\" />\r\n        <title>Tree</title>\r\n        <style>\r\n          ul { list-style-type: none; margin: 0; padding-left: 1rem; }\r\n          li { margin: 4px 0; }\r\n        </style>\r\n      </head>\r\n      <body>\r\n        ${body}\r\n      </body>\r\n    </html>\r\n  `;\r\n}\r\n"],"mappings":"AAAA,OAAO,SAASA,YAAYA,CAACC,QAAQ,EAAE;EACrC,MAAMC,UAAU,GAAIC,IAAI,IAAK;IAC3B,MAAMC,QAAQ,GAAGD,IAAI,CAACC,QAAQ,IAAID,IAAI,CAACC,QAAQ,CAACC,MAAM,GAClD,OAAOF,IAAI,CAACC,QAAQ,CAACE,GAAG,CAACJ,UAAU,CAAC,CAACK,IAAI,CAAC,EAAE,CAAC,OAAO,GACpD,EAAE;IACN,OAAO,OAAOJ,IAAI,CAACK,IAAI,GAAGJ,QAAQ,OAAO;EAC3C,CAAC;EAED,IAAIK,IAAI,GAAG,gBAAgB;EAC3B,IAAIC,KAAK,CAACC,OAAO,CAACV,QAAQ,CAAC,EAAE;IAC3BQ,IAAI,GAAGR,QAAQ,CAACI,MAAM,GAAG,OAAOJ,QAAQ,CAACK,GAAG,CAACJ,UAAU,CAAC,CAACK,IAAI,CAAC,EAAE,CAAC,OAAO,GAAG,gBAAgB;EAC7F,CAAC,MAAM,IAAIN,QAAQ,IAAI,OAAOA,QAAQ,KAAK,QAAQ,EAAE;IACnDQ,IAAI,GAAG,OAAOP,UAAU,CAACD,QAAQ,CAAC,OAAO;EAC3C;EAEA,OAAO;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAUQ,IAAI;AACd;AACA;AACA,GAAG;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}