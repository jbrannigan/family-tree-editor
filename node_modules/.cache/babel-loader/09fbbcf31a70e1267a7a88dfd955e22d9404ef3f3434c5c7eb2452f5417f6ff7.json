{"ast":null,"code":"var _jsxFileName = \"/home/jbrannigan/src/familytree/src/TreeView.js\",\n  _s = $RefreshSig$();\n// TreeView.js\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TreeNode = ({\n  node,\n  onFocus\n}) => {\n  _s();\n  var _node$children;\n  const [expanded, setExpanded] = useState(true);\n  const toggle = () => setExpanded(!expanded);\n  return /*#__PURE__*/_jsxDEV(\"li\", {\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      onClick: toggle,\n      style: {\n        cursor: \"pointer\"\n      },\n      children: [((_node$children = node.children) === null || _node$children === void 0 ? void 0 : _node$children.length) > 0 ? expanded ? \"▼ \" : \"▶ \" : \"\", node.name]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => onFocus(node),\n      style: {\n        marginLeft: \"10px\"\n      },\n      children: \"Focus\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this), expanded && node.children && /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: node.children.map((child, index) => /*#__PURE__*/_jsxDEV(TreeNode, {\n        node: child,\n        onFocus: onFocus\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 5\n  }, this);\n};\n_s(TreeNode, \"NZEs4N34I2vU569ODzuIjdsqMlo=\");\n_c = TreeNode;\nconst TreeView = ({\n  tree,\n  onFocus\n}) => {\n  if (!tree || tree.length === 0) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"No tree data available\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 42\n  }, this);\n  const treeArray = Array.isArray(tree) ? tree : [tree];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Tree View (Collapsible)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: treeArray.map((node, index) => /*#__PURE__*/_jsxDEV(TreeNode, {\n        node: node,\n        onFocus: onFocus\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n_c2 = TreeView;\nexport default TreeView;\nvar _c, _c2;\n$RefreshReg$(_c, \"TreeNode\");\n$RefreshReg$(_c2, \"TreeView\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","TreeNode","node","onFocus","_s","_node$children","expanded","setExpanded","toggle","children","onClick","style","cursor","length","name","fileName","_jsxFileName","lineNumber","columnNumber","marginLeft","map","child","index","_c","TreeView","tree","treeArray","Array","isArray","_c2","$RefreshReg$"],"sources":["/home/jbrannigan/src/familytree/src/TreeView.js"],"sourcesContent":["// TreeView.js\r\nimport React, { useState } from \"react\";\r\n\r\nconst TreeNode = ({ node, onFocus }) => {\r\n  const [expanded, setExpanded] = useState(true);\r\n\r\n  const toggle = () => setExpanded(!expanded);\r\n\r\n  return (\r\n    <li>\r\n      <span onClick={toggle} style={{ cursor: \"pointer\" }}>\r\n        {node.children?.length > 0 ? (expanded ? \"▼ \" : \"▶ \") : \"\"}\r\n        {node.name}\r\n      </span>\r\n      <button onClick={() => onFocus(node)} style={{ marginLeft: \"10px\" }}>\r\n        Focus\r\n      </button>\r\n      {expanded && node.children && (\r\n        <ul>\r\n          {node.children.map((child, index) => (\r\n            <TreeNode key={index} node={child} onFocus={onFocus} />\r\n          ))}\r\n        </ul>\r\n      )}\r\n    </li>\r\n  );\r\n};\r\n\r\nconst TreeView = ({ tree, onFocus }) => {\r\n  if (!tree || tree.length === 0) return <div>No tree data available</div>;\r\n\r\n  const treeArray = Array.isArray(tree) ? tree : [tree];\r\n\r\n  return (\r\n    <div>\r\n      <h3>Tree View (Collapsible)</h3>\r\n      <ul>\r\n        {treeArray.map((node, index) => (\r\n          <TreeNode key={index} node={node} onFocus={onFocus} />\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TreeView;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}