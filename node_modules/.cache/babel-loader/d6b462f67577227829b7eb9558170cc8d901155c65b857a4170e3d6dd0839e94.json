{"ast":null,"code":"// App.js\nimport React,{useState,useEffect,useRef}from\"react\";import TreeEditor from\"./TreeEditor\";import TreeView from\"./TreeView\";import GraphView from\"./GraphView\";import UploadButton from\"./UploadButton\";import DownloadButtons from\"./DownloadButtons\";import{parseTree}from\"./utils/parseTree\";import{generateHTML}from\"./utils/generateHTML\";import\"./App.css\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const App=()=>{const[treeText,setTreeText]=useState(\"\");const[treeData,setTreeData]=useState([]);// full parsed tree (array)\nconst[focusedNode,setFocusedNode]=useState(null);// node object when focused\n// Width of the left (editor) pane in pixels. Starts at 50%.\nconst containerRef=useRef(null);const[leftWidth,setLeftWidth]=useState(0);// 0 means \"compute 50% on mount\"\nconst[dragging,setDragging]=useState(false);useEffect(()=>{// Initialize leftWidth to half of the container width on first render\nif(leftWidth===0&&containerRef.current){const w=containerRef.current.clientWidth;setLeftWidth(Math.round(w*0.5));}},[leftWidth]);useEffect(()=>{const onMove=e=>{if(!dragging||!containerRef.current)return;const bounds=containerRef.current.getBoundingClientRect();// Clamp to [min, max] so panes can’t collapse or overlap\nconst min=220;// min editor width\nconst max=bounds.width-220;// min tree width\nconst x=Math.min(max,Math.max(min,e.clientX-bounds.left));setLeftWidth(x);};const onUp=()=>setDragging(false);if(dragging){window.addEventListener(\"mousemove\",onMove);window.addEventListener(\"mouseup\",onUp);}return()=>{window.removeEventListener(\"mousemove\",onMove);window.removeEventListener(\"mouseup\",onUp);};},[dragging]);// Parse text -> tree\nuseEffect(()=>{try{const parsed=parseTree(treeText)||[];setTreeData(parsed);}catch(err){console.error(\"Error parsing tree:\",err);setTreeData([]);}},[treeText]);// Helper: returns like \"-05AUG2025-2310\"\nconst tsSuffix=()=>{const d=new Date();const dd=String(d.getDate()).padStart(2,\"0\");const months=[\"JAN\",\"FEB\",\"MAR\",\"APR\",\"MAY\",\"JUN\",\"JUL\",\"AUG\",\"SEP\",\"OCT\",\"NOV\",\"DEC\"];const mmm=months[d.getMonth()];const yyyy=d.getFullYear();const hh=String(d.getHours()).padStart(2,\"0\");const mm=String(d.getMinutes()).padStart(2,\"0\");return`-${dd}${mmm}${yyyy}-${hh}${mm}`;};// File + editor handlers\nconst handleFileLoad=text=>setTreeText(text);const handleTextChange=text=>setTreeText(text);// Focus handlers\nconst handleFocus=node=>setFocusedNode(node);const handleUnfocus=()=>setFocusedNode(null);// What to render (focused sub-tree vs full tree)\nconst displayedTree=focusedNode?[focusedNode]:treeData;// Downloads\nconst handleDownloadHTML=()=>{// Use treeData for HTML export of whole source text doc; \n// change to displayedTree if you want export to respect focus\n// const html = generateHTML(treeData); // <-Full Tree\nconst html=generateHTML(displayedTree);// <-Foces Tree\nconst blob=new Blob([html],{type:\"text/html\"});const url=URL.createObjectURL(blob);const a=document.createElement(\"a\");a.href=url;a.download=`family_tree${tsSuffix()}.html`;a.click();URL.revokeObjectURL(url);};// NEW: save edited text as .txt\nconst handleDownloadTXT=()=>{const blob=new Blob([treeText!==null&&treeText!==void 0?treeText:\"\"],{type:\"text/plain\"});const url=URL.createObjectURL(blob);const a=document.createElement(\"a\");a.href=url;a.download=`family_tree_text${tsSuffix()}.txt`;a.click();URL.revokeObjectURL(url);};const handleDownloadJSON=()=>{// Use treeData for JSON export of whole source text doc; \n// change to displayedTree if you want export to respect focus\n//const json = JSON.stringify(treeData, null, 2); //<-Full Tree\nconst json=JSON.stringify(displayedTree,null,2);//<-Focues Tree\nconst blob=new Blob([json],{type:\"application/json\"});const url=URL.createObjectURL(blob);const a=document.createElement(\"a\");a.href=url;a.download=`family_tree${tsSuffix()}.json`;a.click();URL.revokeObjectURL(url);};const handleDownloadSVG=()=>{// Assumes GraphView sets id=\"graph-svg\" on the <svg>. No-op if not present.\nconst svgEl=document.getElementById(\"graph-svg\");if(!svgEl){console.warn(\"SVG element not found for download.\");return;}const serializer=new XMLSerializer();const source=serializer.serializeToString(svgEl);const blob=new Blob([source],{type:\"image/svg+xml\"});const url=URL.createObjectURL(blob);const a=document.createElement(\"a\");a.href=url;a.download=`family_tree${tsSuffix()}.svg`;a.click();URL.revokeObjectURL(url);};return/*#__PURE__*/_jsxs(\"div\",{className:\"app-container\",style:{padding:\"1rem\"},children:[/*#__PURE__*/_jsxs(\"div\",{className:\"top-bar\",children:[/*#__PURE__*/_jsx(UploadButton,{className:\"btn btn-primary\",onLoad:handleFileLoad}),/*#__PURE__*/_jsx(\"button\",{className:\"btn\",onClick:handleDownloadTXT,\"aria-label\":\"Save Edited Text\",children:\"Save Edited Text\"}),/*#__PURE__*/_jsx(\"button\",{className:\"btn\",onClick:handleDownloadHTML,\"aria-label\":\"Download HTML\",children:\"Download HTML\"}),/*#__PURE__*/_jsx(\"button\",{className:\"btn\",onClick:handleDownloadSVG,\"aria-label\":\"Download SVG\",children:\"Download SVG\"}),/*#__PURE__*/_jsx(\"button\",{className:\"btn\",onClick:handleDownloadJSON,\"aria-label\":\"Download JSON\",children:\"Download JSON\"}),/*#__PURE__*/_jsx(\"div\",{className:\"spacer\"}),focusedNode&&/*#__PURE__*/_jsx(\"button\",{className:\"btn btn-ghost\",onClick:handleUnfocus,\"aria-label\":\"Unfocus\",title:\"Unfocus\",children:\"Unfocus\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"split\",ref:containerRef,style:{minHeight:300},children:[/*#__PURE__*/_jsxs(\"div\",{className:\"pane left-pane\",style:{width:leftWidth||\"50%\"},children:[/*#__PURE__*/_jsx(\"h3\",{style:{marginTop:0},children:\"Tree Text Editor\"}),/*#__PURE__*/_jsx(TreeEditor,{treeText:treeText,onTextChange:handleTextChange})]}),/*#__PURE__*/_jsx(\"div\",{className:`resizer ${dragging?\"dragging\":\"\"}`,role:\"separator\",\"aria-label\":\"Resize editor and tree panes\",\"aria-orientation\":\"vertical\",tabIndex:0,onMouseDown:()=>setDragging(true),onKeyDown:e=>{// keyboard nudges for accessibility\nif(e.key===\"ArrowLeft\")setLeftWidth(w=>Math.max(220,w-16));if(e.key===\"ArrowRight\"&&containerRef.current){const max=containerRef.current.clientWidth-220;setLeftWidth(w=>Math.min(max,w+16));}}}),/*#__PURE__*/_jsxs(\"div\",{className:\"pane right-pane\",children:[/*#__PURE__*/_jsx(\"h3\",{style:{marginTop:0},children:\"Tree View\"}),/*#__PURE__*/_jsx(\"p\",{children:\"Click on \\uD83D\\uDD0D to focus on a part of the tree\"}),/*#__PURE__*/_jsx(\"li\",{children:\"This will then be reflected in the SVG Tree Diagram, below\"}),/*#__PURE__*/_jsx(\"li\",{children:\"When the Tree View is focused, the downloaded file(s) will also reflect the focused view\"}),/*#__PURE__*/_jsx(\"li\",{children:\"Afterwards, use the \\\"Unfocus\\\" button to restore the full view\"}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(TreeView,{tree:displayedTree,onFocus:handleFocus,onUnfocus:handleUnfocus,focusedNodeId:focusedNode?focusedNode.id:null})]})]}),/*#__PURE__*/_jsx(\"div\",{style:{marginTop:16},children:/*#__PURE__*/_jsx(GraphView,{tree:displayedTree})})]});};export default App;","map":{"version":3,"names":["React","useState","useEffect","useRef","TreeEditor","TreeView","GraphView","UploadButton","DownloadButtons","parseTree","generateHTML","jsx","_jsx","jsxs","_jsxs","App","treeText","setTreeText","treeData","setTreeData","focusedNode","setFocusedNode","containerRef","leftWidth","setLeftWidth","dragging","setDragging","current","w","clientWidth","Math","round","onMove","e","bounds","getBoundingClientRect","min","max","width","x","clientX","left","onUp","window","addEventListener","removeEventListener","parsed","err","console","error","tsSuffix","d","Date","dd","String","getDate","padStart","months","mmm","getMonth","yyyy","getFullYear","hh","getHours","mm","getMinutes","handleFileLoad","text","handleTextChange","handleFocus","node","handleUnfocus","displayedTree","handleDownloadHTML","html","blob","Blob","type","url","URL","createObjectURL","a","document","createElement","href","download","click","revokeObjectURL","handleDownloadTXT","handleDownloadJSON","json","JSON","stringify","handleDownloadSVG","svgEl","getElementById","warn","serializer","XMLSerializer","source","serializeToString","className","style","padding","children","onLoad","onClick","title","ref","minHeight","marginTop","onTextChange","role","tabIndex","onMouseDown","onKeyDown","key","tree","onFocus","onUnfocus","focusedNodeId","id"],"sources":["/home/jbrannigan/src/familytree/src/App.js"],"sourcesContent":["// App.js\r\nimport React, { useState, useEffect, useRef } from \"react\";\r\nimport TreeEditor from \"./TreeEditor\";\r\nimport TreeView from \"./TreeView\";\r\nimport GraphView from \"./GraphView\";\r\nimport UploadButton from \"./UploadButton\";\r\nimport DownloadButtons from \"./DownloadButtons\";\r\nimport { parseTree } from \"./utils/parseTree\";\r\nimport { generateHTML } from \"./utils/generateHTML\";\r\nimport \"./App.css\";\r\n\r\nconst App = () => {\r\n  const [treeText, setTreeText] = useState(\"\");\r\n  const [treeData, setTreeData] = useState([]);           // full parsed tree (array)\r\n  const [focusedNode, setFocusedNode] = useState(null);   // node object when focused\r\n\r\n// Width of the left (editor) pane in pixels. Starts at 50%.\r\nconst containerRef = useRef(null);\r\nconst [leftWidth, setLeftWidth] = useState(0); // 0 means \"compute 50% on mount\"\r\nconst [dragging, setDragging] = useState(false);\r\n\r\nuseEffect(() => {\r\n  // Initialize leftWidth to half of the container width on first render\r\n  if (leftWidth === 0 && containerRef.current) {\r\n    const w = containerRef.current.clientWidth;\r\n    setLeftWidth(Math.round(w * 0.5));\r\n  }\r\n}, [leftWidth]);\r\n\r\nuseEffect(() => {\r\n  const onMove = (e) => {\r\n    if (!dragging || !containerRef.current) return;\r\n    const bounds = containerRef.current.getBoundingClientRect();\r\n    // Clamp to [min, max] so panes can’t collapse or overlap\r\n    const min = 220;                          // min editor width\r\n    const max = bounds.width - 220;           // min tree width\r\n    const x = Math.min(max, Math.max(min, e.clientX - bounds.left));\r\n    setLeftWidth(x);\r\n  };\r\n\r\n  const onUp = () => setDragging(false);\r\n\r\n  if (dragging) {\r\n    window.addEventListener(\"mousemove\", onMove);\r\n    window.addEventListener(\"mouseup\", onUp);\r\n  }\r\n  return () => {\r\n    window.removeEventListener(\"mousemove\", onMove);\r\n    window.removeEventListener(\"mouseup\", onUp);\r\n  };\r\n}, [dragging]); \r\n  // Parse text -> tree\r\n  useEffect(() => {\r\n    try {\r\n      const parsed = parseTree(treeText) || [];\r\n      setTreeData(parsed);\r\n    } catch (err) {\r\n      console.error(\"Error parsing tree:\", err);\r\n      setTreeData([]);\r\n    }\r\n  }, [treeText]);\r\n\r\n  // Helper: returns like \"-05AUG2025-2310\"\r\n  const tsSuffix = () => {\r\n    const d = new Date();\r\n    const dd = String(d.getDate()).padStart(2, \"0\");\r\n    const months = [\"JAN\",\"FEB\",\"MAR\",\"APR\",\"MAY\",\"JUN\",\"JUL\",\"AUG\",\"SEP\",\"OCT\",\"NOV\",\"DEC\"];\r\n    const mmm = months[d.getMonth()];\r\n    const yyyy = d.getFullYear();\r\n    const hh = String(d.getHours()).padStart(2, \"0\");\r\n    const mm = String(d.getMinutes()).padStart(2, \"0\");\r\n    return `-${dd}${mmm}${yyyy}-${hh}${mm}`;\r\n  };\r\n\r\n  // File + editor handlers\r\n  const handleFileLoad = (text) => setTreeText(text);\r\n  const handleTextChange = (text) => setTreeText(text);\r\n\r\n  // Focus handlers\r\n  const handleFocus = (node) => setFocusedNode(node);\r\n  const handleUnfocus = () => setFocusedNode(null);\r\n\r\n  // What to render (focused sub-tree vs full tree)\r\n  const displayedTree = focusedNode ? [focusedNode] : treeData;\r\n\r\n  // Downloads\r\n  const handleDownloadHTML = () => {\r\n    // Use treeData for HTML export of whole source text doc; \r\n    // change to displayedTree if you want export to respect focus\r\n    // const html = generateHTML(treeData); // <-Full Tree\r\n    const html = generateHTML(displayedTree); // <-Foces Tree\r\n    const blob = new Blob([html], { type: \"text/html\" });\r\n    const url = URL.createObjectURL(blob);\r\n    const a = document.createElement(\"a\");\r\n    a.href = url;\r\n    a.download = `family_tree${tsSuffix()}.html`;\r\n    a.click();\r\n    URL.revokeObjectURL(url);\r\n  };\r\n// NEW: save edited text as .txt\r\n  const handleDownloadTXT = () => {\r\n    const blob = new Blob([treeText ?? \"\"], { type: \"text/plain\" });\r\n    const url = URL.createObjectURL(blob);\r\n    const a = document.createElement(\"a\");\r\n    a.href = url;\r\n    a.download = `family_tree_text${tsSuffix()}.txt`;\r\n    a.click();\r\n    URL.revokeObjectURL(url);\r\n  };\r\n  const handleDownloadJSON = () => {\r\n    // Use treeData for JSON export of whole source text doc; \r\n    // change to displayedTree if you want export to respect focus\r\n    //const json = JSON.stringify(treeData, null, 2); //<-Full Tree\r\n    const json = JSON.stringify(displayedTree, null, 2); //<-Focues Tree\r\n    const blob = new Blob([json], { type: \"application/json\" });\r\n    const url = URL.createObjectURL(blob);\r\n    const a = document.createElement(\"a\");\r\n    a.href = url;\r\n    a.download = `family_tree${tsSuffix()}.json`;\r\n    a.click();\r\n    URL.revokeObjectURL(url);\r\n  };\r\n\r\n  const handleDownloadSVG = () => {\r\n    // Assumes GraphView sets id=\"graph-svg\" on the <svg>. No-op if not present.\r\n    const svgEl = document.getElementById(\"graph-svg\");\r\n    if (!svgEl) {\r\n      console.warn(\"SVG element not found for download.\");\r\n      return;\r\n    }\r\n    const serializer = new XMLSerializer();\r\n    const source = serializer.serializeToString(svgEl);\r\n    const blob = new Blob([source], { type: \"image/svg+xml\" });\r\n    const url = URL.createObjectURL(blob);\r\n    const a = document.createElement(\"a\");\r\n    a.href = url;\r\n    a.download = `family_tree${tsSuffix()}.svg`;\r\n    a.click();\r\n    URL.revokeObjectURL(url);\r\n  };\r\n\r\n  return (\r\n    <div className=\"app-container\" style={{ padding: \"1rem\" }}>\r\n      {/* Header / toolbar */}\r\n      <div className=\"top-bar\">\r\n\r\n        <UploadButton className= \"btn btn-primary\" onLoad={handleFileLoad} />\r\n\r\n        <button className=\"btn\" onClick={handleDownloadTXT} aria-label=\"Save Edited Text\">\r\n          Save Edited Text\r\n       </button>\r\n      \r\n        <button className=\"btn\" onClick={handleDownloadHTML} aria-label=\"Download HTML\">\r\n          Download HTML\r\n        </button>\r\n\r\n        <button className=\"btn\" onClick={handleDownloadSVG} aria-label=\"Download SVG\">\r\n          Download SVG\r\n        </button>\r\n\r\n        <button className=\"btn\" onClick={handleDownloadJSON} aria-label=\"Download JSON\">\r\n          Download JSON\r\n        </button>\r\n\r\n  {/* push Unfocus to the right (optional) */}\r\n  <div className=\"spacer\" />\r\n\r\n  {focusedNode && (\r\n    <button\r\n      className=\"btn btn-ghost\"\r\n      onClick={handleUnfocus}\r\n      aria-label=\"Unfocus\"\r\n      title=\"Unfocus\"\r\n    >\r\n      Unfocus\r\n    </button>\r\n  )}\r\n  </div>\r\n\r\n{/* Top split: editor + tree with resizer */}\r\n<div\r\n  className=\"split\"\r\n  ref={containerRef}\r\n  style={{ minHeight: 300 }}\r\n>\r\n  <div\r\n    className=\"pane left-pane\"\r\n    style={{ width: leftWidth || \"50%\" }}\r\n  >\r\n    <h3 style={{ marginTop: 0 }}>Tree Text Editor</h3>\r\n    <TreeEditor treeText={treeText} onTextChange={handleTextChange} />\r\n  </div>\r\n\r\n  <div\r\n    className={`resizer ${dragging ? \"dragging\" : \"\"}`}\r\n    role=\"separator\"\r\n    aria-label=\"Resize editor and tree panes\"\r\n    aria-orientation=\"vertical\"\r\n    tabIndex={0}\r\n    onMouseDown={() => setDragging(true)}\r\n    onKeyDown={(e) => {\r\n      // keyboard nudges for accessibility\r\n      if (e.key === \"ArrowLeft\") setLeftWidth((w) => Math.max(220, w - 16));\r\n      if (e.key === \"ArrowRight\" && containerRef.current) {\r\n        const max = containerRef.current.clientWidth - 220;\r\n        setLeftWidth((w) => Math.min(max, w + 16));\r\n      }\r\n    }}\r\n  />\r\n\r\n  <div className=\"pane right-pane\">\r\n    <h3 style={{ marginTop: 0 }}>Tree View</h3>\r\n    <p>Click on 🔍 to focus on a part of the tree</p>\r\n    <li>This will then be reflected in the SVG Tree Diagram, below</li>\r\n    <li>When the Tree View is focused, the downloaded file(s) will also reflect the focused view</li>\r\n    <li>Afterwards, use the \"Unfocus\" button to restore the full view</li>\r\n    <br></br>\r\n    <TreeView\r\n      tree={displayedTree}\r\n      onFocus={handleFocus}\r\n      onUnfocus={handleUnfocus}\r\n      focusedNodeId={focusedNode ? focusedNode.id : null}\r\n    />\r\n  </div>\r\n</div>\r\n\r\n      {/* Bottom: SVG view */}\r\n      <div style={{ marginTop: 16 }}>\r\n        <GraphView tree={displayedTree} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}