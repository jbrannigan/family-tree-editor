{"ast":null,"code":"var _jsxFileName = \"/home/jbrannigan/src/familytree/src/GraphView.js\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction computeLayout(node, depth = 0, x = 0, layout = [], spacing = 150, verticalSpacing = 60) {\n  var _node$children;\n  if (!node || typeof node !== \"object\") return layout;\n  const width = 140;\n  const height = 50;\n  const children = (_node$children = node.children) !== null && _node$children !== void 0 ? _node$children : [];\n  let subtreeWidth = 0;\n  for (const child of children) {\n    computeLayout(child, depth + 1, x + subtreeWidth, layout, spacing, verticalSpacing);\n    subtreeWidth += spacing;\n  }\n  const xPos = x + (subtreeWidth - spacing) / 2;\n  const yPos = depth * verticalSpacing;\n  layout.push({\n    ...node,\n    x: xPos,\n    y: yPos,\n    width,\n    height\n  });\n  return layout;\n}\nfunction drawLines(layout) {\n  const lines = [];\n  layout.forEach(node => {\n    var _node$children2;\n    const parentX = node.x + node.width / 2;\n    const parentY = node.y + node.height;\n    ((_node$children2 = node.children) !== null && _node$children2 !== void 0 ? _node$children2 : []).forEach(child => {\n      const childNode = layout.find(n => n.id === child.id);\n      if (childNode) {\n        const childX = childNode.x + childNode.width / 2;\n        const childY = childNode.y;\n\n        // Create an L-shaped line\n        const midY = (parentY + childY) / 2;\n        lines.push(/*#__PURE__*/_jsxDEV(\"polyline\", {\n          points: `${parentX},${parentY} ${parentX},${midY} ${childX},${midY} ${childX},${childY}`,\n          fill: \"none\",\n          stroke: \"#999\",\n          strokeWidth: \"1.5\"\n        }, `${node.id}-${child.id}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 11\n        }, this));\n      }\n    });\n  });\n  return lines;\n}\nexport default function GraphView({\n  treeData\n}) {\n  const layout = Array.isArray(treeData) && treeData.length > 0 && treeData[0] ? computeLayout(treeData[0]) : [];\n  const padding = 20;\n  const width = Math.max(...layout.map(n => n.x + n.width)) + padding;\n  const height = Math.max(...layout.map(n => n.y + n.height)) + padding;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      overflow: \"auto\",\n      border: \"1px solid #ccc\",\n      marginTop: \"1rem\"\n    },\n    children: /*#__PURE__*/_jsxDEV(\"svg\", {\n      width: width,\n      height: height,\n      children: [drawLines(layout), layout.map(node => /*#__PURE__*/_jsxDEV(\"g\", {\n        children: [/*#__PURE__*/_jsxDEV(\"rect\", {\n          x: node.x,\n          y: node.y,\n          width: node.width,\n          height: node.height,\n          rx: 6,\n          ry: 6,\n          fill: \"#f9f9f9\",\n          stroke: \"#ccc\",\n          strokeWidth: 1.5\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n          x: node.x + 5,\n          y: node.y + 20,\n          fontSize: 12,\n          dominantBaseline: \"hanging\",\n          style: {\n            whiteSpace: \"pre-wrap\"\n          },\n          children: node.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 13\n        }, this)]\n      }, node.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n}\n_c = GraphView;\nvar _c;\n$RefreshReg$(_c, \"GraphView\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","computeLayout","node","depth","x","layout","spacing","verticalSpacing","_node$children","width","height","children","subtreeWidth","child","xPos","yPos","push","y","drawLines","lines","forEach","_node$children2","parentX","parentY","childNode","find","n","id","childX","childY","midY","points","fill","stroke","strokeWidth","fileName","_jsxFileName","lineNumber","columnNumber","GraphView","treeData","Array","isArray","length","padding","Math","max","map","style","overflow","border","marginTop","rx","ry","fontSize","dominantBaseline","whiteSpace","name","_c","$RefreshReg$"],"sources":["/home/jbrannigan/src/familytree/src/GraphView.js"],"sourcesContent":["import React from \"react\";\r\n\r\nfunction computeLayout(node, depth = 0, x = 0, layout = [], spacing = 150, verticalSpacing = 60) {\r\n  if (!node || typeof node !== \"object\") return layout;\r\n\r\n  const width = 140;\r\n  const height = 50;\r\n\r\n  const children = node.children ?? [];\r\n\r\n  let subtreeWidth = 0;\r\n  for (const child of children) {\r\n    computeLayout(child, depth + 1, x + subtreeWidth, layout, spacing, verticalSpacing);\r\n    subtreeWidth += spacing;\r\n  }\r\n\r\n  const xPos = x + (subtreeWidth - spacing) / 2;\r\n  const yPos = depth * verticalSpacing;\r\n\r\n  layout.push({ ...node, x: xPos, y: yPos, width, height });\r\n\r\n  return layout;\r\n}\r\n\r\nfunction drawLines(layout) {\r\n  const lines = [];\r\n\r\n  layout.forEach((node) => {\r\n    const parentX = node.x + node.width / 2;\r\n    const parentY = node.y + node.height;\r\n\r\n    (node.children ?? []).forEach((child) => {\r\n      const childNode = layout.find((n) => n.id === child.id);\r\n      if (childNode) {\r\n        const childX = childNode.x + childNode.width / 2;\r\n        const childY = childNode.y;\r\n\r\n        // Create an L-shaped line\r\n        const midY = (parentY + childY) / 2;\r\n\r\n        lines.push(\r\n          <polyline\r\n            key={`${node.id}-${child.id}`}\r\n            points={`${parentX},${parentY} ${parentX},${midY} ${childX},${midY} ${childX},${childY}`}\r\n            fill=\"none\"\r\n            stroke=\"#999\"\r\n            strokeWidth=\"1.5\"\r\n          />\r\n        );\r\n      }\r\n    });\r\n  });\r\n\r\n  return lines;\r\n}\r\n\r\nexport default function GraphView({ treeData }) {\r\n  const layout = Array.isArray(treeData) && treeData.length > 0 && treeData[0]\r\n    ? computeLayout(treeData[0])\r\n    : [];\r\n\r\n  const padding = 20;\r\n  const width = Math.max(...layout.map((n) => n.x + n.width)) + padding;\r\n  const height = Math.max(...layout.map((n) => n.y + n.height)) + padding;\r\n\r\n  return (\r\n    <div style={{ overflow: \"auto\", border: \"1px solid #ccc\", marginTop: \"1rem\" }}>\r\n      <svg width={width} height={height}>\r\n        {drawLines(layout)}\r\n        {layout.map((node) => (\r\n          <g key={node.id}>\r\n            <rect\r\n              x={node.x}\r\n              y={node.y}\r\n              width={node.width}\r\n              height={node.height}\r\n              rx={6}\r\n              ry={6}\r\n              fill=\"#f9f9f9\"\r\n              stroke=\"#ccc\"\r\n              strokeWidth={1.5}\r\n            />\r\n            <text\r\n              x={node.x + 5}\r\n              y={node.y + 20}\r\n              fontSize={12}\r\n              dominantBaseline=\"hanging\"\r\n              style={{ whiteSpace: \"pre-wrap\" }}\r\n            >\r\n              {node.name}\r\n            </text>\r\n          </g>\r\n        ))}\r\n      </svg>\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}