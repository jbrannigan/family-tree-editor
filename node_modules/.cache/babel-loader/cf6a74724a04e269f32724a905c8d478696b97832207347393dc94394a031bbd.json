{"ast":null,"code":"var _jsxFileName = \"/home/jbrannigan/src/familytree/src/App.js\",\n  _s = $RefreshSig$();\n// App.js\nimport React, { useEffect, useState } from \"react\";\nimport UploadButton from \"./UploadButton\";\nimport DownloadButtons from \"./DownloadButtons\";\nimport TreeView from \"./TreeView\";\nimport GraphView from \"./GraphView\";\nimport { parseTree } from \"./utils/parseTree\";\nimport { generateHTML } from \"./utils/generateHTML\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction findNodeById(nodes, id) {\n  for (const n of nodes) {\n    var _n$id;\n    if (((_n$id = n.id) !== null && _n$id !== void 0 ? _n$id : n.name) === id) return n;\n    if (Array.isArray(n.children)) {\n      const found = findNodeById(n.children, id);\n      if (found) return found;\n    }\n  }\n  return null;\n}\nexport default function App() {\n  _s();\n  const [treeText, setTreeText] = useState(\"\");\n  const [treeData, setTreeData] = useState([]);\n  const [focusedNodeId, setFocusedNodeId] = useState(null);\n  // Width of the left editor pane as a percentage\n  const [leftPct, setLeftPct] = useState(40);\n  const draggingRef = useRef(false);\n  useEffect(() => {\n    const onMove = e => {\n      if (!draggingRef.current) return;\n      const app = document.querySelector(\".app-root\");\n      if (!app) return;\n      const rect = app.getBoundingClientRect();\n      const x = e.clientX - rect.left; // pixels from left of container\n      const pct = Math.min(70, Math.max(20, x / rect.width * 100)); // clamp 20â€“70%\n      setLeftPct(pct);\n    };\n    const onUp = () => draggingRef.current = false;\n    window.addEventListener(\"mousemove\", onMove);\n    window.addEventListener(\"mouseup\", onUp);\n    return () => {\n      window.removeEventListener(\"mousemove\", onMove);\n      window.removeEventListener(\"mouseup\", onUp);\n    };\n  }, []);\n  const startDrag = () => draggingRef.current = true;\n  // parse on text change\n  useEffect(() => {\n    try {\n      const parsed = parseTree(treeText); // must return an ARRAY of root nodes\n      setTreeData(Array.isArray(parsed) ? parsed : parsed ? [parsed] : []);\n    } catch (e) {\n      console.error(\"Parse error:\", e);\n      setTreeData([]);\n    }\n  }, [treeText]);\n\n  // file load\n  const handleFileLoad = text => setTreeText(text);\n\n  // focus/unfocus\n  const handleFocus = node => {\n    var _node$id;\n    return setFocusedNodeId((_node$id = node.id) !== null && _node$id !== void 0 ? _node$id : node.name);\n  };\n  const handleUnfocus = () => setFocusedNodeId(null);\n\n  // compute displayed tree\n  const focusedNode = focusedNodeId ? findNodeById(treeData, focusedNodeId) : null;\n  const displayedTree = focusedNode ? [focusedNode] : treeData;\n\n  // downloads\n  const download = (content, name, type) => {\n    const blob = new Blob([content], {\n      type\n    });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement(\"a\");\n    a.href = url;\n    a.download = name;\n    a.click();\n    URL.revokeObjectURL(url);\n  };\n  const handleDownloadHTML = () => {\n    const html = generateHTML(displayedTree);\n    download(html, \"family_tree.html\", \"text/html\");\n  };\n  const handleDownloadJSON = () => {\n    const json = JSON.stringify(displayedTree, null, 2);\n    download(json, \"family_tree.json\", \"application/json\");\n  };\n  const handleDownloadSVG = () => {\n    const svg = document.getElementById(\"graph-svg\");\n    if (!svg) return;\n    const serializer = new XMLSerializer();\n    // include xmlns so standalone SVG opens correctly\n    const clone = svg.cloneNode(true);\n    clone.setAttribute(\"xmlns\", \"http://www.w3.org/2000/svg\");\n    const source = serializer.serializeToString(clone);\n    download(source, \"family_tree.svg\", \"image/svg+xml\");\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-root\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"top-bar\",\n      children: [/*#__PURE__*/_jsxDEV(UploadButton, {\n        onLoad: handleFileLoad\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this), focusedNode && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleUnfocus,\n        children: \"Unfocus\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(DownloadButtons, {\n        onDownloadHTML: handleDownloadHTML,\n        onDownloadSVG: handleDownloadSVG,\n        onDownloadJSON: handleDownloadJSON\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"two-pane\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pane left\",\n        style: {\n          width: `${leftPct}%`\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Tree Text Editor\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          value: treeText,\n          onChange: handleTextChange,\n          placeholder: \"Paste or edit tree text here...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"gutter\",\n        role: \"separator\",\n        \"aria-orientation\": \"vertical\",\n        onMouseDown: startDrag,\n        title: \"Drag to resize\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pane right\",\n        children: /*#__PURE__*/_jsxDEV(TreeView, {\n          tree: displayedTree,\n          onFocus: handleFocus,\n          onUnfocus: handleUnfocus,\n          focusedNodeId: focusedNode ? focusedNode.id : null,\n          expandedNodes: expandedNodes,\n          toggleNode: toggleNode\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"svg-row\",\n      children: /*#__PURE__*/_jsxDEV(GraphView, {\n        tree: displayedTree\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 3\n  }, this);\n}\n_s(App, \"O5mDc8dTwkVCQPGfdFFGD3T79uw=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","UploadButton","DownloadButtons","TreeView","GraphView","parseTree","generateHTML","jsxDEV","_jsxDEV","findNodeById","nodes","id","n","_n$id","name","Array","isArray","children","found","App","_s","treeText","setTreeText","treeData","setTreeData","focusedNodeId","setFocusedNodeId","leftPct","setLeftPct","draggingRef","useRef","onMove","e","current","app","document","querySelector","rect","getBoundingClientRect","x","clientX","left","pct","Math","min","max","width","onUp","window","addEventListener","removeEventListener","startDrag","parsed","console","error","handleFileLoad","text","handleFocus","node","_node$id","handleUnfocus","focusedNode","displayedTree","download","content","type","blob","Blob","url","URL","createObjectURL","a","createElement","href","click","revokeObjectURL","handleDownloadHTML","html","handleDownloadJSON","json","JSON","stringify","handleDownloadSVG","svg","getElementById","serializer","XMLSerializer","clone","cloneNode","setAttribute","source","serializeToString","className","onLoad","fileName","_jsxFileName","lineNumber","columnNumber","onClick","onDownloadHTML","onDownloadSVG","onDownloadJSON","style","value","onChange","handleTextChange","placeholder","role","onMouseDown","title","tree","onFocus","onUnfocus","expandedNodes","toggleNode","_c","$RefreshReg$"],"sources":["/home/jbrannigan/src/familytree/src/App.js"],"sourcesContent":["// App.js\r\nimport React, { useEffect, useState } from \"react\";\r\nimport UploadButton from \"./UploadButton\";\r\nimport DownloadButtons from \"./DownloadButtons\";\r\nimport TreeView from \"./TreeView\";\r\nimport GraphView from \"./GraphView\";\r\nimport { parseTree } from \"./utils/parseTree\";\r\nimport { generateHTML } from \"./utils/generateHTML\";\r\n\r\nfunction findNodeById(nodes, id) {\r\n  for (const n of nodes) {\r\n    if ((n.id ?? n.name) === id) return n;\r\n    if (Array.isArray(n.children)) {\r\n      const found = findNodeById(n.children, id);\r\n      if (found) return found;\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\nexport default function App() {\r\n  const [treeText, setTreeText] = useState(\"\");\r\n  const [treeData, setTreeData] = useState([]);\r\n  const [focusedNodeId, setFocusedNodeId] = useState(null);\r\n  // Width of the left editor pane as a percentage\r\n  const [leftPct, setLeftPct] = useState(40);\r\n  const draggingRef = useRef(false);\r\n\r\n  useEffect(() => {\r\n    const onMove = (e) => {\r\n      if (!draggingRef.current) return;\r\n      const app = document.querySelector(\".app-root\");\r\n      if (!app) return;\r\n      const rect = app.getBoundingClientRect();\r\n      const x = e.clientX - rect.left; // pixels from left of container\r\n      const pct = Math.min(70, Math.max(20, (x / rect.width) * 100)); // clamp 20â€“70%\r\n      setLeftPct(pct);\r\n    };\r\n    const onUp = () => (draggingRef.current = false);\r\n\r\n    window.addEventListener(\"mousemove\", onMove);\r\n    window.addEventListener(\"mouseup\", onUp);\r\n    return () => {\r\n      window.removeEventListener(\"mousemove\", onMove);\r\n      window.removeEventListener(\"mouseup\", onUp);\r\n    };\r\n  }, []);\r\n\r\n  const startDrag = () => (draggingRef.current = true);\r\n  // parse on text change\r\n  useEffect(() => {\r\n    try {\r\n      const parsed = parseTree(treeText); // must return an ARRAY of root nodes\r\n      setTreeData(Array.isArray(parsed) ? parsed : (parsed ? [parsed] : []));\r\n    } catch (e) {\r\n      console.error(\"Parse error:\", e);\r\n      setTreeData([]);\r\n    }\r\n  }, [treeText]);\r\n\r\n  // file load\r\n  const handleFileLoad = (text) => setTreeText(text);\r\n\r\n  // focus/unfocus\r\n  const handleFocus = (node) => setFocusedNodeId(node.id ?? node.name);\r\n  const handleUnfocus = () => setFocusedNodeId(null);\r\n\r\n  // compute displayed tree\r\n  const focusedNode = focusedNodeId ? findNodeById(treeData, focusedNodeId) : null;\r\n  const displayedTree = focusedNode ? [focusedNode] : treeData;\r\n\r\n  // downloads\r\n  const download = (content, name, type) => {\r\n    const blob = new Blob([content], { type });\r\n    const url = URL.createObjectURL(blob);\r\n    const a = document.createElement(\"a\");\r\n    a.href = url;\r\n    a.download = name;\r\n    a.click();\r\n    URL.revokeObjectURL(url);\r\n  };\r\n\r\n  const handleDownloadHTML = () => {\r\n    const html = generateHTML(displayedTree);\r\n    download(html, \"family_tree.html\", \"text/html\");\r\n  };\r\n\r\n  const handleDownloadJSON = () => {\r\n    const json = JSON.stringify(displayedTree, null, 2);\r\n    download(json, \"family_tree.json\", \"application/json\");\r\n  };\r\n\r\n  const handleDownloadSVG = () => {\r\n    const svg = document.getElementById(\"graph-svg\");\r\n    if (!svg) return;\r\n    const serializer = new XMLSerializer();\r\n    // include xmlns so standalone SVG opens correctly\r\n    const clone = svg.cloneNode(true);\r\n    clone.setAttribute(\"xmlns\", \"http://www.w3.org/2000/svg\");\r\n    const source = serializer.serializeToString(clone);\r\n    download(source, \"family_tree.svg\", \"image/svg+xml\");\r\n  };\r\n\r\n  return (\r\n  <div className=\"app-root\">\r\n      {/* Top controls, keep whatever you already have */}\r\n      <div className=\"top-bar\">\r\n        <UploadButton onLoad={handleFileLoad} />\r\n        {focusedNode && <button onClick={handleUnfocus}>Unfocus</button>}\r\n        <DownloadButtons\r\n          onDownloadHTML={handleDownloadHTML}\r\n          onDownloadSVG={handleDownloadSVG}\r\n          onDownloadJSON={handleDownloadJSON}\r\n        />\r\n      </div>\r\n\r\n      {/* Two-pane row with draggable gutter */}\r\n      <div className=\"two-pane\">\r\n        <div className=\"pane left\" style={{ width: `${leftPct}%` }}>\r\n          <h3>Tree Text Editor</h3>\r\n          <textarea\r\n            value={treeText}\r\n            onChange={handleTextChange}\r\n            placeholder=\"Paste or edit tree text here...\"\r\n          />\r\n        </div>\r\n\r\n        <div\r\n          className=\"gutter\"\r\n          role=\"separator\"\r\n          aria-orientation=\"vertical\"\r\n          onMouseDown={startDrag}\r\n          title=\"Drag to resize\"\r\n        />\r\n\r\n        <div className=\"pane right\">\r\n          <TreeView\r\n            tree={displayedTree}\r\n            onFocus={handleFocus}\r\n            onUnfocus={handleUnfocus}\r\n            focusedNodeId={focusedNode ? focusedNode.id : null}\r\n            expandedNodes={expandedNodes}\r\n            toggleNode={toggleNode}\r\n          />\r\n        </div>\r\n      </div>\r\n      {/* SVG view below */}\r\n      <div className=\"svg-row\">\r\n        <GraphView tree={displayedTree} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}