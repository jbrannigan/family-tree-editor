{"ast":null,"code":"var _jsxFileName = \"/home/jbrannigan/src/familytree/src/GraphView.js\",\n  _s = $RefreshSig$();\n// GraphView.js\nimport React, { useRef, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NODE_WIDTH = 150;\nconst NODE_HEIGHT = 80;\nconst HORIZONTAL_GAP = 30;\nconst VERTICAL_GAP = 40;\n\n// Utility: wrap text into multiple lines based on character limit\nconst wrapText = (text, maxChars = 20) => {\n  const words = text.split(\" \");\n  const lines = [];\n  let currentLine = words[0];\n  for (let i = 1; i < words.length; i++) {\n    if ((currentLine + \" \" + words[i]).length <= maxChars) {\n      currentLine += \" \" + words[i];\n    } else {\n      lines.push(currentLine);\n      currentLine = words[i];\n    }\n  }\n  lines.push(currentLine);\n  return lines;\n};\n\n// Compute layout recursively\nconst computeLayout = (node, depth = 0, xOffset = 0) => {\n  const layout = {\n    node,\n    depth,\n    x: xOffset,\n    width: 0,\n    children: []\n  };\n  let totalWidth = 0;\n  if (node.children && node.children.length > 0) {\n    node.children.forEach(child => {\n      const childLayout = computeLayout(child, depth + 1, xOffset + totalWidth);\n      layout.children.push(childLayout);\n      totalWidth += childLayout.width + HORIZONTAL_GAP;\n    });\n    totalWidth -= HORIZONTAL_GAP;\n    layout.width = Math.max(totalWidth, NODE_WIDTH);\n    layout.x = xOffset + layout.width / 2 - NODE_WIDTH / 2;\n  } else {\n    layout.width = NODE_WIDTH;\n    layout.x = xOffset;\n  }\n  return layout;\n};\nconst renderNode = (layout, yOffset = 0) => {\n  const x = layout.x;\n  const y = layout.depth * (NODE_HEIGHT + VERTICAL_GAP) + yOffset;\n  const textLines = wrapText(layout.node.name);\n  const box = /*#__PURE__*/_jsxDEV(\"g\", {\n    children: [/*#__PURE__*/_jsxDEV(\"rect\", {\n      x: x,\n      y: y,\n      width: NODE_WIDTH,\n      height: NODE_HEIGHT,\n      rx: 10,\n      ry: 10,\n      fill: \"#eee\",\n      stroke: \"#333\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), textLines.map((line, i) => /*#__PURE__*/_jsxDEV(\"text\", {\n      x: x + NODE_WIDTH / 2,\n      y: y + 20 + i * 14,\n      textAnchor: \"middle\",\n      fontSize: \"12\",\n      children: line\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }, this))]\n  }, layout.node.id || layout.node.name, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n  const connectors = layout.children.flatMap(childLayout => {\n    const childX = childLayout.x + NODE_WIDTH / 2;\n    const childY = childLayout.depth * (NODE_HEIGHT + VERTICAL_GAP) + yOffset;\n    const parentX = layout.x + NODE_WIDTH / 2;\n    const parentY = y + NODE_HEIGHT;\n    return /*#__PURE__*/_jsxDEV(\"path\", {\n      d: `M${parentX},${parentY} V${parentY + VERTICAL_GAP / 2} H${childX} V${childY}`,\n      stroke: \"#000\",\n      fill: \"none\"\n    }, childLayout.node.id || childLayout.node.name, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this);\n  });\n  return [box, connectors, ...layout.children.flatMap(child => renderNode(child, yOffset))];\n};\nconst GraphView = ({\n  tree\n}) => {\n  _s();\n  const svgRef = useRef(null);\n  useEffect(() => {\n    if (svgRef.current) {\n      const svg = svgRef.current;\n      svg.setAttribute(\"width\", \"100%\");\n      svg.setAttribute(\"height\", \"600\");\n    }\n  }, []);\n  const normalizedTree = Array.isArray(tree) ? tree : [tree];\n  if (!normalizedTree || normalizedTree.length === 0) return null;\n  const layouts = normalizedTree.map((node, index) => computeLayout(node, 0, index * 300));\n  const elements = layouts.flatMap(layout => renderNode(layout));\n  const totalWidth = layouts.reduce((sum, layout) => sum + layout.width + HORIZONTAL_GAP, 0);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"SVG View\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: svgRef,\n      width: totalWidth,\n      height: 800,\n      children: elements\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 126,\n    columnNumber: 5\n  }, this);\n};\n_s(GraphView, \"89Ty783ABEwsfMbSOeu9vscWF34=\");\n_c = GraphView;\nexport default GraphView;\nvar _c;\n$RefreshReg$(_c, \"GraphView\");","map":{"version":3,"names":["React","useRef","useEffect","jsxDEV","_jsxDEV","NODE_WIDTH","NODE_HEIGHT","HORIZONTAL_GAP","VERTICAL_GAP","wrapText","text","maxChars","words","split","lines","currentLine","i","length","push","computeLayout","node","depth","xOffset","layout","x","width","children","totalWidth","forEach","child","childLayout","Math","max","renderNode","yOffset","y","textLines","name","box","height","rx","ry","fill","stroke","fileName","_jsxFileName","lineNumber","columnNumber","map","line","textAnchor","fontSize","id","connectors","flatMap","childX","childY","parentX","parentY","d","GraphView","tree","_s","svgRef","current","svg","setAttribute","normalizedTree","Array","isArray","layouts","index","elements","reduce","sum","ref","_c","$RefreshReg$"],"sources":["/home/jbrannigan/src/familytree/src/GraphView.js"],"sourcesContent":["// GraphView.js\r\nimport React, { useRef, useEffect } from \"react\";\r\n\r\nconst NODE_WIDTH = 150;\r\nconst NODE_HEIGHT = 80;\r\nconst HORIZONTAL_GAP = 30;\r\nconst VERTICAL_GAP = 40;\r\n\r\n// Utility: wrap text into multiple lines based on character limit\r\nconst wrapText = (text, maxChars = 20) => {\r\n  const words = text.split(\" \");\r\n  const lines = [];\r\n  let currentLine = words[0];\r\n\r\n  for (let i = 1; i < words.length; i++) {\r\n    if ((currentLine + \" \" + words[i]).length <= maxChars) {\r\n      currentLine += \" \" + words[i];\r\n    } else {\r\n      lines.push(currentLine);\r\n      currentLine = words[i];\r\n    }\r\n  }\r\n  lines.push(currentLine);\r\n  return lines;\r\n};\r\n\r\n// Compute layout recursively\r\nconst computeLayout = (node, depth = 0, xOffset = 0) => {\r\n  const layout = { node, depth, x: xOffset, width: 0, children: [] };\r\n  let totalWidth = 0;\r\n\r\n  if (node.children && node.children.length > 0) {\r\n    node.children.forEach((child) => {\r\n      const childLayout = computeLayout(child, depth + 1, xOffset + totalWidth);\r\n      layout.children.push(childLayout);\r\n      totalWidth += childLayout.width + HORIZONTAL_GAP;\r\n    });\r\n    totalWidth -= HORIZONTAL_GAP;\r\n    layout.width = Math.max(totalWidth, NODE_WIDTH);\r\n    layout.x = xOffset + layout.width / 2 - NODE_WIDTH / 2;\r\n  } else {\r\n    layout.width = NODE_WIDTH;\r\n    layout.x = xOffset;\r\n  }\r\n\r\n  return layout;\r\n};\r\n\r\nconst renderNode = (layout, yOffset = 0) => {\r\n  const x = layout.x;\r\n  const y = layout.depth * (NODE_HEIGHT + VERTICAL_GAP) + yOffset;\r\n  const textLines = wrapText(layout.node.name);\r\n\r\n  const box = (\r\n    <g key={layout.node.id || layout.node.name}>\r\n      <rect\r\n        x={x}\r\n        y={y}\r\n        width={NODE_WIDTH}\r\n        height={NODE_HEIGHT}\r\n        rx={10}\r\n        ry={10}\r\n        fill=\"#eee\"\r\n        stroke=\"#333\"\r\n      />\r\n      {textLines.map((line, i) => (\r\n        <text\r\n          key={i}\r\n          x={x + NODE_WIDTH / 2}\r\n          y={y + 20 + i * 14}\r\n          textAnchor=\"middle\"\r\n          fontSize=\"12\"\r\n        >\r\n          {line}\r\n        </text>\r\n      ))}\r\n    </g>\r\n  );\r\n\r\n  const connectors = layout.children.flatMap((childLayout) => {\r\n    const childX = childLayout.x + NODE_WIDTH / 2;\r\n    const childY = (childLayout.depth * (NODE_HEIGHT + VERTICAL_GAP)) + yOffset;\r\n\r\n    const parentX = layout.x + NODE_WIDTH / 2;\r\n    const parentY = y + NODE_HEIGHT;\r\n\r\n    return (\r\n      <path\r\n        key={childLayout.node.id || childLayout.node.name}\r\n        d={`M${parentX},${parentY} V${parentY + VERTICAL_GAP / 2} H${childX} V${childY}`}\r\n        stroke=\"#000\"\r\n        fill=\"none\"\r\n      />\r\n    );\r\n  });\r\n\r\n  return [\r\n    box,\r\n    connectors,\r\n    ...layout.children.flatMap((child) => renderNode(child, yOffset)),\r\n  ];\r\n};\r\n\r\nconst GraphView = ({ tree }) => {\r\n  const svgRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (svgRef.current) {\r\n      const svg = svgRef.current;\r\n      svg.setAttribute(\"width\", \"100%\");\r\n      svg.setAttribute(\"height\", \"600\");\r\n    }\r\n  }, []);\r\n\r\n  const normalizedTree = Array.isArray(tree) ? tree : [tree];\r\n  if (!normalizedTree || normalizedTree.length === 0) return null;\r\n\r\n  const layouts = normalizedTree.map((node, index) =>\r\n    computeLayout(node, 0, index * 300)\r\n  );\r\n  const elements = layouts.flatMap((layout) => renderNode(layout));\r\n\r\n  const totalWidth = layouts.reduce((sum, layout) => sum + layout.width + HORIZONTAL_GAP, 0);\r\n\r\n  return (\r\n    <div>\r\n      <h3>SVG View</h3>\r\n      <svg ref={svgRef} width={totalWidth} height={800}>\r\n        {elements}\r\n      </svg>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GraphView;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}